// PWA Debug Script - Sistema de Votos 2025
console.log('üîç Iniciando debugging PWA...');

// Funci√≥n para verificar todos los requisitos PWA
function checkPWARequirements() {
    console.log('üìã Verificando requisitos PWA...');
    
    const requirements = {
        // 1. Service Worker
        serviceWorker: 'serviceWorker' in navigator,
        
        // 2. Manifest
        manifest: !!document.querySelector('link[rel="manifest"]'),
        
        // 3. HTTPS o localhost
        secureContext: location.protocol === 'https:' || location.hostname === 'localhost' || location.hostname === '127.0.0.1',
        
        // 4. Push Manager (opcional)
        pushManager: 'PushManager' in window,
        
        // 5. Notifications
        notifications: 'Notification' in window,
        
        // 6. Display mode
        displayMode: window.matchMedia && window.matchMedia('(display-mode: standalone)').matches,
        
        // 7. Before install prompt
        beforeInstallPrompt: false, // Se verificar√° despu√©s
    };
    
    console.log('üìä Estado de requisitos PWA:', requirements);
    
    // Verificar si todos los requisitos b√°sicos est√°n cumplidos
    const basicRequirements = requirements.serviceWorker && requirements.manifest && requirements.secureContext;
    
    if (basicRequirements) {
        console.log('‚úÖ Requisitos b√°sicos PWA cumplidos');
    } else {
        console.log('‚ùå Algunos requisitos b√°sicos PWA no est√°n cumplidos');
    }
    
    return requirements;
}

// Funci√≥n para verificar el manifest
function checkManifest() {
    console.log('üìÑ Verificando manifest...');
    
    const manifestLink = document.querySelector('link[rel="manifest"]');
    if (manifestLink) {
        console.log('‚úÖ Manifest link encontrado:', manifestLink.href);
        
        // Intentar cargar el manifest
        fetch(manifestLink.href)
            .then(response => response.json())
            .then(manifest => {
                console.log('üìÑ Manifest cargado:', manifest);
                
                // Verificar campos requeridos
                const requiredFields = ['name', 'short_name', 'start_url', 'display', 'icons'];
                const missingFields = requiredFields.filter(field => !manifest[field]);
                
                if (missingFields.length === 0) {
                    console.log('‚úÖ Todos los campos requeridos del manifest est√°n presentes');
                } else {
                    console.log('‚ùå Campos faltantes en manifest:', missingFields);
                }
            })
            .catch(error => {
                console.error('‚ùå Error cargando manifest:', error);
            });
    } else {
        console.log('‚ùå Manifest link no encontrado');
    }
}

// Funci√≥n para verificar service worker
function checkServiceWorker() {
    console.log('üîß Verificando service worker...');
    
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.ready.then(registration => {
            console.log('‚úÖ Service Worker registrado:', registration);
            console.log('üì± Scope:', registration.scope);
            console.log('üì± Active:', registration.active);
            console.log('üì± Installing:', registration.installing);
            console.log('üì± Waiting:', registration.waiting);
        }).catch(error => {
            console.error('‚ùå Error con service worker:', error);
        });
    } else {
        console.log('‚ùå Service Worker no soportado');
    }
}

// Funci√≥n para verificar instalabilidad
function checkInstallability() {
    console.log('üì± Verificando instalabilidad...');
    
    // Verificar si ya est√° instalada
    if (window.matchMedia && window.matchMedia('(display-mode: standalone)').matches) {
        console.log('‚úÖ App ya est√° instalada (modo standalone)');
        return;
    }
    
    // Verificar beforeinstallprompt
    let deferredPrompt = null;
    
    window.addEventListener('beforeinstallprompt', (e) => {
        console.log('üì± Evento beforeinstallprompt detectado');
        e.preventDefault();
        deferredPrompt = e;
        
        // Mostrar bot√≥n de instalaci√≥n
        const installBtn = document.getElementById('manual-install-btn');
        if (installBtn) {
            installBtn.style.display = 'inline-block';
            console.log('üì± Bot√≥n de instalaci√≥n mostrado');
        }
    });
    
    // Verificar si ya se dispar√≥ el evento
    setTimeout(() => {
        if (deferredPrompt) {
            console.log('‚úÖ beforeinstallprompt disponible');
        } else {
            console.log('‚ùå beforeinstallprompt no disponible');
            console.log('üí° Posibles razones:');
            console.log('   - App ya instalada');
            console.log('   - No cumple criterios de instalaci√≥n');
            console.log('   - Navegador no soporta PWA');
        }
    }, 2000);
}

// Funci√≥n para mostrar informaci√≥n completa
function showCompletePWAInfo() {
    console.log('üìä === INFORMACI√ìN COMPLETA PWA ===');
    
    // Verificar requisitos
    const requirements = checkPWARequirements();
    
    // Verificar manifest
    checkManifest();
    
    // Verificar service worker
    checkServiceWorker();
    
    // Verificar instalabilidad
    checkInstallability();
    
    // Informaci√≥n adicional
    console.log('üåê Protocolo:', location.protocol);
    console.log('üè† Hostname:', location.hostname);
    console.log('üì± User Agent:', navigator.userAgent);
    console.log('üì± P√°gina controlada por SW:', !!navigator.serviceWorker.controller);
    
    // Verificar si PWA Installer est√° disponible
    if (window.pwaInstaller) {
        console.log('‚úÖ PWA Installer disponible');
        window.pwaInstaller.showPWAInfo();
    } else {
        console.log('‚ùå PWA Installer no disponible');
    }
    
    console.log('üìä === FIN INFORMACI√ìN PWA ===');
}

// Ejecutar debugging cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ PWA Debug iniciado');
    
    // Esperar un poco para que todo se cargue
    setTimeout(() => {
        showCompletePWAInfo();
    }, 1000);
});

// Funci√≥n global para debugging manual
window.debugPWA = function() {
    showCompletePWAInfo();
};

console.log('üîç PWA Debug script cargado. Usa debugPWA() para verificar estado.'); 