// system-repair.js
// Reparaci√≥n espec√≠fica para las funciones del sistema de votos 2025

console.log('üîß Iniciando reparaci√≥n espec√≠fica del sistema...');

// Funci√≥n principal de reparaci√≥n espec√≠fica
async function repairSpecificFunctions() {
    console.log('üéØ Reparando funciones espec√≠ficas...');
    
    try {
        // 1. Reparar Registro
        await repairRegistration();
        
        // 2. Reparar Confirmar Voto
        await repairCheckIn();
        
        // 3. Reparar Listado
        await repairList();
        
        // 4. Reparar Totales
        await repairTotals();
        
        // 5. Reparar Estad√≠sticas
        await repairStatistics();
        
        console.log('‚úÖ Reparaci√≥n espec√≠fica completada');
        return true;
        
    } catch (error) {
        console.error('‚ùå Error en reparaci√≥n espec√≠fica:', error);
        return false;
    }
}

// Reparar funci√≥n de Registro
async function repairRegistration() {
    console.log('üìù Reparando funci√≥n de Registro...');
    
    try {
        // Verificar formulario de registro
        const registrationForm = document.getElementById('registration-form');
        if (!registrationForm) {
            console.error('‚ùå Formulario de registro no encontrado');
            return false;
        }
        
        // Configurar event listener para el formulario
        registrationForm.removeEventListener('submit', handleRegistrationSubmit);
        registrationForm.addEventListener('submit', handleRegistrationSubmit);
        
        // Cargar opciones de UBCH
        await loadUBCHOptions();
        
        // Cargar opciones de comunidad
        await loadCommunityOptions();
        
        console.log('‚úÖ Funci√≥n de Registro reparada');
        return true;
        
    } catch (error) {
        console.error('‚ùå Error reparando registro:', error);
        return false;
    }
}

// Reparar funci√≥n de Confirmar Voto
async function repairCheckIn() {
    console.log('‚úÖ Reparando funci√≥n de Confirmar Voto...');
    
    try {
        // Verificar p√°gina de confirmaci√≥n
        const checkInPage = document.getElementById('check-in-page');
        if (!checkInPage) {
            console.error('‚ùå P√°gina de confirmaci√≥n no encontrada');
            return false;
        }
        
        // Configurar b√∫squeda de c√©dula
        const cedulaSearch = document.getElementById('cedula-search');
        if (cedulaSearch) {
            cedulaSearch.removeEventListener('input', handleCedulaSearch);
            cedulaSearch.addEventListener('input', handleCedulaSearch);
        }
        
        // Configurar bot√≥n de confirmaci√≥n
        const confirmButton = document.getElementById('confirm-vote-btn');
        if (confirmButton) {
            confirmButton.removeEventListener('click', handleVoteConfirmation);
            confirmButton.addEventListener('click', handleVoteConfirmation);
        }
        
        console.log('‚úÖ Funci√≥n de Confirmar Voto reparada');
        return true;
        
    } catch (error) {
        console.error('‚ùå Error reparando confirmaci√≥n:', error);
        return false;
    }
}

// Reparar funci√≥n de Listado
async function repairList() {
    console.log('üìã Reparando funci√≥n de Listado...');
    
    try {
        // Verificar p√°gina de listado
        const listPage = document.getElementById('listado-page');
        if (!listPage) {
            console.error('‚ùå P√°gina de listado no encontrada');
            return false;
        }
        
        // Configurar filtros
        setupListFilters();
        
        // Configurar paginaci√≥n
        setupListPagination();
        
        // Cargar datos iniciales
        await loadListData();
        
        console.log('‚úÖ Funci√≥n de Listado reparada');
        return true;
        
    } catch (error) {
        console.error('‚ùå Error reparando listado:', error);
        return false;
    }
}

// Reparar funci√≥n de Totales
async function repairTotals() {
    console.log('üìä Reparando funci√≥n de Totales...');
    
    try {
        // Verificar p√°gina de totales
        const totalsPage = document.getElementById('dashboard-page');
        if (!totalsPage) {
            console.error('‚ùå P√°gina de totales no encontrada');
            return false;
        }
        
        // Configurar actualizaci√≥n de totales
        setupTotalsUpdate();
        
        // Cargar totales iniciales
        await loadTotalsData();
        
        console.log('‚úÖ Funci√≥n de Totales reparada');
        return true;
        
    } catch (error) {
        console.error('‚ùå Error reparando totales:', error);
        return false;
    }
}

// Reparar funci√≥n de Estad√≠sticas
async function repairStatistics() {
    console.log('üìà Reparando funci√≥n de Estad√≠sticas...');
    
    try {
        // Verificar p√°gina de estad√≠sticas
        const statsPage = document.getElementById('statistics-page');
        if (!statsPage) {
            console.error('‚ùå P√°gina de estad√≠sticas no encontrada');
            return false;
        }
        
        // Configurar gr√°ficos
        setupStatisticsCharts();
        
        // Cargar datos de estad√≠sticas
        await loadStatisticsData();
        
        console.log('‚úÖ Funci√≥n de Estad√≠sticas reparada');
        return true;
        
    } catch (error) {
        console.error('‚ùå Error reparando estad√≠sticas:', error);
        return false;
    }
}

// Funciones auxiliares para el registro
async function loadUBCHOptions() {
    try {
        const ubchSelect = document.getElementById('ubch');
        if (!ubchSelect) return;
        
        // Limpiar opciones existentes
        ubchSelect.innerHTML = '<option value="">Selecciona un CV</option>';
        
        // Cargar opciones desde Firebase o configuraci√≥n local
        const ubchConfig = window.firebaseDB ? window.firebaseDB.defaultUBCHConfig : {};
        
        for (const [ubch, communities] of Object.entries(ubchConfig)) {
            const option = document.createElement('option');
            option.value = ubch;
            option.textContent = ubch;
            ubchSelect.appendChild(option);
        }
        
        console.log('‚úÖ Opciones de CV cargadas');
        
    } catch (error) {
        console.error('‚ùå Error cargando opciones de CV:', error);
    }
}

async function loadCommunityOptions() {
    try {
        const communitySelect = document.getElementById('community');
        if (!communitySelect) return;
        
        // Limpiar opciones existentes
        communitySelect.innerHTML = '<option value="">Selecciona una comunidad</option>';
        
        // Cargar comunidades desde Firebase o configuraci√≥n local
        const ubchConfig = window.firebaseDB ? window.firebaseDB.defaultUBCHConfig : {};
        const allCommunities = [];
        
        for (const communities of Object.values(ubchConfig)) {
            allCommunities.push(...communities);
        }
        
        // Ordenar y eliminar duplicados
        const uniqueCommunities = [...new Set(allCommunities)].sort();
        
        for (const community of uniqueCommunities) {
            const option = document.createElement('option');
            option.value = community;
            option.textContent = community;
            communitySelect.appendChild(option);
        }
        
        console.log('‚úÖ Opciones de comunidad cargadas');
        
    } catch (error) {
        console.error('‚ùå Error cargando opciones de comunidad:', error);
    }
}

// Funci√≥n para manejar el env√≠o del formulario de registro
async function handleRegistrationSubmit(event) {
    event.preventDefault();
    console.log('üìù Procesando registro...');
    
    try {
        const formData = new FormData(event.target);
        const voteData = {
            community: formData.get('community'),
            name: formData.get('name'),
            cedula: formData.get('cedula'),
            telefono: formData.get('telefono'),
            sexo: formData.get('sexo'),
            edad: parseInt(formData.get('edad')),
            ubch: formData.get('ubch'),
            timestamp: new Date().toISOString(),
            status: 'registered'
        };
        
        // Validar datos
        if (!voteData.name || !voteData.cedula || !voteData.sexo || !voteData.edad || !voteData.ubch) {
            alert('Por favor, completa todos los campos requeridos');
            return;
        }
        
        // Guardar en Firebase o localStorage
        if (window.votingSystem && typeof window.votingSystem.addVote === 'function') {
            await window.votingSystem.addVote(voteData);
        } else {
            // Guardar en localStorage como fallback
            const votes = JSON.parse(localStorage.getItem('votes') || '[]');
            votes.push({ ...voteData, id: Date.now().toString() });
            localStorage.setItem('votes', JSON.stringify(votes));
        }
        
        // Limpiar formulario
        event.target.reset();
        
        // Mostrar mensaje de √©xito
        alert('Persona registrada exitosamente');
        
        console.log('‚úÖ Registro completado');
        
    } catch (error) {
        console.error('‚ùå Error en registro:', error);
        alert('Error al registrar persona. Intenta nuevamente.');
    }
}

// Funciones auxiliares para confirmaci√≥n de voto
function handleCedulaSearch(event) {
    const cedula = event.target.value.trim();
    if (cedula.length >= 6) {
        searchPersonByCedula(cedula);
    }
}

async function searchPersonByCedula(cedula) {
    try {
        console.log(`üîç Buscando persona con c√©dula: ${cedula}`);
        
        let person = null;
        
        // Buscar en Firebase o localStorage
        if (window.votingSystem && typeof window.votingSystem.searchByCedula === 'function') {
            person = await window.votingSystem.searchByCedula(cedula);
        } else {
            // Buscar en localStorage
            const votes = JSON.parse(localStorage.getItem('votes') || '[]');
            person = votes.find(vote => vote.cedula === cedula && vote.status === 'registered');
        }
        
        if (person) {
            displayPersonForConfirmation(person);
        } else {
            alert('Persona no encontrada o ya confirm√≥ su voto');
        }
        
    } catch (error) {
        console.error('‚ùå Error buscando persona:', error);
        alert('Error al buscar persona');
    }
}

function displayPersonForConfirmation(person) {
    // Mostrar informaci√≥n de la persona para confirmaci√≥n
    const confirmationDiv = document.getElementById('person-confirmation');
    if (confirmationDiv) {
        confirmationDiv.innerHTML = `
            <div class="person-info">
                <h3>Informaci√≥n de la Persona</h3>
                <p><strong>Nombre:</strong> ${person.name}</p>
                <p><strong>C√©dula:</strong> ${person.cedula}</p>
                <p><strong>Comunidad:</strong> ${person.community}</p>
                <p><strong>CV:</strong> ${person.ubch}</p>
                <button id="confirm-vote-btn" class="btn btn-success">‚úÖ Confirmar Voto</button>
            </div>
        `;
        
        // Configurar bot√≥n de confirmaci√≥n
        const confirmBtn = document.getElementById('confirm-vote-btn');
        if (confirmBtn) {
            confirmBtn.addEventListener('click', () => handleVoteConfirmation(person));
        }
    }
}

async function handleVoteConfirmation(person) {
    try {
        console.log('‚úÖ Confirmando voto...');
        
        // Actualizar estado del voto
        person.status = 'confirmed';
        person.confirmedAt = new Date().toISOString();
        
        // Guardar en Firebase o localStorage
        if (window.votingSystem && typeof window.votingSystem.updateVote === 'function') {
            await window.votingSystem.updateVote(person.id, person);
        } else {
            // Actualizar en localStorage
            const votes = JSON.parse(localStorage.getItem('votes') || '[]');
            const index = votes.findIndex(vote => vote.id === person.id);
            if (index !== -1) {
                votes[index] = person;
                localStorage.setItem('votes', JSON.stringify(votes));
            }
        }
        
        alert('Voto confirmado exitosamente');
        
        // Limpiar formulario de b√∫squeda
        const cedulaSearch = document.getElementById('cedula-search');
        if (cedulaSearch) {
            cedulaSearch.value = '';
        }
        
        // Limpiar informaci√≥n de persona
        const confirmationDiv = document.getElementById('person-confirmation');
        if (confirmationDiv) {
            confirmationDiv.innerHTML = '';
        }
        
        console.log('‚úÖ Voto confirmado');
        
    } catch (error) {
        console.error('‚ùå Error confirmando voto:', error);
        alert('Error al confirmar voto');
    }
}

// Funciones auxiliares para listado
function setupListFilters() {
    // Configurar filtros del listado
    const filterElements = document.querySelectorAll('.filter-control');
    filterElements.forEach(filter => {
        filter.addEventListener('change', updateListDisplay);
    });
}

function setupListPagination() {
    // Configurar paginaci√≥n del listado
    const paginationButtons = document.querySelectorAll('.pagination-btn');
    paginationButtons.forEach(button => {
        button.addEventListener('click', handlePagination);
    });
}

async function loadListData() {
    try {
        console.log('üìã Cargando datos del listado...');
        
        let votes = [];
        
        // Cargar desde Firebase o localStorage
        if (window.votingSystem && typeof window.votingSystem.getVotes === 'function') {
            votes = await window.votingSystem.getVotes();
        } else {
            votes = JSON.parse(localStorage.getItem('votes') || '[]');
        }
        
        displayListData(votes);
        
        console.log(`‚úÖ ${votes.length} registros cargados en listado`);
        
    } catch (error) {
        console.error('‚ùå Error cargando datos del listado:', error);
    }
}

function displayListData(votes) {
    const listContainer = document.getElementById('votes-list');
    if (!listContainer) return;
    
    let html = '';
    
    votes.forEach(vote => {
        html += `
            <tr>
                <td>${vote.name}</td>
                <td>${vote.cedula}</td>
                <td>${vote.community}</td>
                <td>${vote.ubch}</td>
                <td>${vote.status}</td>
                <td>${new Date(vote.timestamp).toLocaleDateString()}</td>
            </tr>
        `;
    });
    
    listContainer.innerHTML = html;
}

// Funciones auxiliares para totales
function setupTotalsUpdate() {
    // Configurar actualizaci√≥n autom√°tica de totales
    setInterval(updateTotals, 30000); // Actualizar cada 30 segundos
}

async function loadTotalsData() {
    try {
        console.log('üìä Cargando datos de totales...');
        
        let votes = [];
        
        // Cargar desde Firebase o localStorage
        if (window.votingSystem && typeof window.votingSystem.getVotes === 'function') {
            votes = await window.votingSystem.getVotes();
        } else {
            votes = JSON.parse(localStorage.getItem('votes') || '[]');
        }
        
        updateTotalsDisplay(votes);
        
        console.log('‚úÖ Totales actualizados');
        
    } catch (error) {
        console.error('‚ùå Error cargando totales:', error);
    }
}

function updateTotalsDisplay(votes) {
    const totalRegistered = votes.filter(vote => vote.status === 'registered').length;
    const totalConfirmed = votes.filter(vote => vote.status === 'confirmed').length;
    const totalPending = totalRegistered - totalConfirmed;
    
    // Actualizar displays
    const totalElement = document.getElementById('total-registered');
    if (totalElement) totalElement.textContent = totalRegistered;
    
    const confirmedElement = document.getElementById('total-confirmed');
    if (confirmedElement) confirmedElement.textContent = totalConfirmed;
    
    const pendingElement = document.getElementById('total-pending');
    if (pendingElement) pendingElement.textContent = totalPending;
}

// Funciones auxiliares para estad√≠sticas
function setupStatisticsCharts() {
    // Configurar gr√°ficos de estad√≠sticas
    console.log('üìà Configurando gr√°ficos de estad√≠sticas...');
}

async function loadStatisticsData() {
    try {
        console.log('üìà Cargando datos de estad√≠sticas...');
        
        let votes = [];
        
        // Cargar desde Firebase o localStorage
        if (window.votingSystem && typeof window.votingSystem.getVotes === 'function') {
            votes = await window.votingSystem.getVotes();
        } else {
            votes = JSON.parse(localStorage.getItem('votes') || '[]');
        }
        
        updateStatisticsDisplay(votes);
        
        console.log('‚úÖ Estad√≠sticas actualizadas');
        
    } catch (error) {
        console.error('‚ùå Error cargando estad√≠sticas:', error);
    }
}

function updateStatisticsDisplay(votes) {
    // Actualizar displays de estad√≠sticas
    console.log('üìä Actualizando displays de estad√≠sticas...');
}

// Funci√≥n para manejar paginaci√≥n
function handlePagination(event) {
    const page = event.target.getAttribute('data-page');
    if (page) {
        loadListData(); // Recargar datos con nueva p√°gina
    }
}

// Funci√≥n para actualizar display del listado
function updateListDisplay() {
    loadListData(); // Recargar datos con filtros aplicados
}

// Funci√≥n para actualizar totales
function updateTotals() {
    loadTotalsData();
}

// Ejecutar reparaci√≥n al cargar
document.addEventListener('DOMContentLoaded', () => {
    console.log('üîß Ejecutando reparaci√≥n espec√≠fica...');
    repairSpecificFunctions().then(success => {
        if (success) {
            console.log('‚úÖ Reparaci√≥n espec√≠fica completada exitosamente');
        } else {
            console.log('‚ö†Ô∏è Algunos problemas persisten en la reparaci√≥n espec√≠fica');
        }
    });
});

// Exportar funciones para uso global
window.repairSpecificFunctions = repairSpecificFunctions;
window.handleRegistrationSubmit = handleRegistrationSubmit;
window.handleCedulaSearch = handleCedulaSearch;
window.handleVoteConfirmation = handleVoteConfirmation;

console.log('üîß Script de reparaci√≥n espec√≠fica cargado'); 