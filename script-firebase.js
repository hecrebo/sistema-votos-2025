// Verificaci√≥n global para evitar m√∫ltiples inicializaciones
if (window.votingSystemInitialized) {
    console.log('‚ö†Ô∏è Sistema ya inicializado, evitando duplicaci√≥n');
} else {
    window.votingSystemInitialized = true;
    console.log('üöÄ Inicializando sistema de votos Firebase...');
}

// Limpiar instancia anterior si existe
if (window.votingSystem) {
    console.log('üîÑ Limpiando instancia anterior del sistema...');
    window.votingSystem = null;
}

// === FUNCIONES GLOBALES PARA REGISTRO ===

// Funci√≥n global para cambiar modo de registro
window.switchRegistrationMode = function(mode) {
    const individualDiv = document.getElementById('individual-registration');
    const bulkDiv = document.getElementById('bulk-registration');
    const myListadoDiv = document.getElementById('mylistado-registration');
    const modeButtons = document.querySelectorAll('.mode-btn');
    
    if (!individualDiv || !bulkDiv || !myListadoDiv) {
        console.warn('‚ö†Ô∏è Elementos de modo de registro no encontrados');
        return;
    }
    
    // Actualizar botones
    modeButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.mode === mode) {
            btn.classList.add('active');
        }
    });
    
    // Mostrar/ocultar secciones
    if (mode === 'individual') {
        individualDiv.style.display = 'block';
        bulkDiv.style.display = 'none';
        myListadoDiv.style.display = 'none';
        
        // Reinicializar el formulario individual si es necesario
        setTimeout(() => {
            if (window.votingSystem) {
                window.votingSystem.renderRegistrationPage();
            }
        }, 100);
    } else if (mode === 'bulk') {
        individualDiv.style.display = 'none';
        bulkDiv.style.display = 'block';
        myListadoDiv.style.display = 'none';
    } else if (mode === 'mylistado') {
        individualDiv.style.display = 'none';
        bulkDiv.style.display = 'none';
        myListadoDiv.style.display = 'block';
        setTimeout(() => {
            if (typeof cargarMiListado === 'function') {
                cargarMiListado();
            }
        }, 100);
    }
    console.log(`‚úÖ Modo de registro cambiado a: ${mode}`);
};

// Funci√≥n global para importar tabla pegada
window.importPasteTable = async function() {
    const pasteTableBody = document.getElementById('paste-table-body');
    const importStatus = document.getElementById('import-massive-status');
    
    if (!pasteTableBody || !importStatus) {
        alert('Error: Elementos de la tabla no encontrados');
        return;
    }

    // Verificar que Firebase est√© disponible
    if (!window.firebaseDB || !window.firebaseDB.votesCollection) {
        alert('Error: Firebase no est√° disponible. Intenta recargar la p√°gina.');
        return;
    }

    importStatus.style.display = 'block';
    importStatus.className = 'import-status info';
    importStatus.textContent = 'Validando y cargando datos...';
    
    let count = 0, errors = 0;
    
    for (let tr of pasteTableBody.rows) {
        const [ubch, community, name, cedula, telefono, sexo, edad] = Array.from(tr.cells).map(td => td.textContent.trim());
        
        // Validaci√≥n b√°sica
        if (!ubch || !community || !name || !cedula || !telefono || !sexo || !edad) {
            errors++;
            tr.style.background = '#fff3cd';
            continue;
        }
        if (!/^\d{6,10}$/.test(cedula)) {
            errors++;
            tr.style.background = '#fff3cd';
            continue;
        }
        if (!/^04\d{9}$/.test(telefono)) {
            errors++;
            tr.style.background = '#fff3cd';
            continue;
        }
        if (!['M','F','m','f'].includes(sexo)) {
            errors++;
            tr.style.background = '#fff3cd';
            continue;
        }
        if (isNaN(edad) || edad < 16 || edad > 120) {
            errors++;
            tr.style.background = '#fff3cd';
            continue;
        }
        
        // Preparar datos
        const data = {
            ubch,
            community,
            name,
            cedula: cedula.replace(/\D/g, ''),
            telefono: telefono.replace(/\D/g, ''),
            sexo: sexo.toUpperCase(),
            edad: parseInt(edad),
            registeredBy: normalizarUsuario(JSON.parse(localStorage.getItem('currentUser')||'{}').username || 'admin'),
            voted: false,
            registeredAt: new Date().toISOString(),
            createdAt: new Date().toISOString()
        };
        
        try {
            // Verificar duplicados por c√©dula
            const existing = await window.firebaseDB.votesCollection.where('cedula','==',data.cedula).get();
            if (!existing.empty) {
                tr.style.background = '#ffeaa7'; // Amarillo: duplicado
                continue;
            }
            
            // Guardar en Firebase
            await window.firebaseDB.votesCollection.add(data);
            count++;
            tr.style.background = '#d4edda'; // Verde: √©xito
        } catch (error) {
            errors++;
            tr.style.background = '#f8d7da'; // Rojo: error
            console.error('Error guardando registro:', error);
        }
    }
    
    importStatus.className = `import-status ${errors > 0 ? 'warning' : 'success'}`;
    importStatus.textContent = `Proceso completado: ${count} registros guardados, ${errors} errores`;
    
    if (count > 0) {
        // Actualizar la interfaz si el sistema de votos est√° disponible
        if (window.votingSystem) {
            setTimeout(() => {
                window.votingSystem.loadDataFromFirebase();
            }, 1000);
        }
    }
};

// Funci√≥n global para limpiar tabla
window.clearPasteTable = function() {
    const pasteTableBody = document.getElementById('paste-table-body');
    const importStatus = document.getElementById('import-massive-status');
    
    if (pasteTableBody) {
        pasteTableBody.innerHTML = '<tr><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr>';
        if (importStatus) {
            importStatus.style.display = 'none';
        }
    }
};

// Clase base para el sistema de votos
class VotingSystem {
    constructor() {
        this.currentPage = 'registration';
        this.votes = [];
        this.candidates = [];
        this.pdfLibrariesReady = false;
        this.projectionInterval = null;
    }

    // M√©todos base que pueden ser sobrescritos
    async init() {
        console.log('üîç Iniciando sistema de votos...');
    }

    setupEventListeners() {
        console.log('üîß Configurando event listeners...');
    }

    renderCurrentPage() {
        console.log('üìÑ Renderizando p√°gina actual...');
    }

    showMessage(message, type, page) {
        console.log(`üí¨ [${type}] ${message}`);
    }

    setLoadingState(page, loading) {
        console.log(`‚è≥ [${page}] Loading: ${loading}`);
    }
}

class VotingSystemFirebase extends VotingSystem {
    constructor() {
        // Llamar al constructor de la clase padre PRIMERO
        super();
        
        // Evitar m√∫ltiples instancias del sistema
        if (window.votingSystem && window.votingSystem !== this) {
            console.log('‚ö†Ô∏è Sistema ya inicializado, evitando duplicaci√≥n');
            return;
        }
        
        // Inicializar propiedades espec√≠ficas de Firebase
        this.userId = null;
        this.registrationQueue = [];
        this.isProcessingQueue = false;
        this.concurrentRegistrations = 0;
        this.maxConcurrentRegistrations = 3;
        this.searchTimeout = null;
        this.cache = new Map();
        this.voteToDelete = null;
        this.voteToEdit = null;
        
        // Asegurar que ubchToCommunityMap sea un objeto (no Map)
        this.ubchToCommunityMap = {};
        
        // Marcar como inicializado
        window.votingSystemInitialized = true;
        window.votingSystem = this;
        
        // Nuevas propiedades para mejoras del listado
        this.currentPage = 'registration';
        this.pageSize = 20;
        this.filteredVotes = [];
        this.selectedVotes = [];
        this.currentSearchTerm = '';
        this.currentSortField = null;
        this.currentSortDirection = 'asc';
        this.currentDetailVote = null;
        
        console.log('‚úÖ Instancia de VotingSystemFirebase creada correctamente');
        
        this.init();
    }

    async init() {
        try {
            console.log('üîÑ Inicializando VotingSystemFirebase...');
            // Verificar usuario actual y establecer p√°gina inicial seg√∫n rol
            const userForHeader = this.getCurrentUser();
            if (!userForHeader || !userForHeader.username) {
                window.location.href = 'login.html';
                return;
            }
            if (userForHeader.rol === 'verificador') {
                this.currentPage = 'check-in';
            } else if (userForHeader.rol === 'registrador') {
                this.currentPage = 'registration';
            }
            // Cargar datos desde Firebase
            await this.loadDataFromFirebase();
            // Configurar event listeners
            this.setupEventListeners();
            // Configurar navegaci√≥n seg√∫n rol
            this.setupNavigationByRole();
            // Renderizar p√°gina inicial
            this.renderCurrentPage();
            // Inicializar sistema offline
            this.inicializarSistemaOffline();
            console.log('‚úÖ VotingSystemFirebase inicializado correctamente');
            this.updateUserId();
        } catch (error) {
            this.handleInitError(error, 'VotingSystemFirebase');
        }
    }

    async loadDataFromFirebase() {
        try {
            // Evitar m√∫ltiples cargas simult√°neas
            if (this.isLoadingData) {
                console.log('‚ö†Ô∏è Carga de datos en progreso, evitando duplicaci√≥n');
                return;
            }
            
            this.isLoadingData = true;
            console.log('üì• Cargando datos desde Firebase...');
            
            // Verificar si Firebase est√° disponible
            if (!window.firebaseDB || !window.firebaseDB.votesCollection) {
                console.log('‚ö†Ô∏è Firebase no disponible, cargando datos locales');
                this.isLoadingData = false;
                return this.loadDataLocally();
            }
            
            // Cargar votos desde Firebase
            const votesSnapshot = await window.firebaseDB.votesCollection.get();
            this.votes = votesSnapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));
            console.log(`‚úÖ ${this.votes.length} votos cargados desde Firebase`);

            // Cargar configuraci√≥n UBCH desde Firebase
            try {
                const ubchDoc = await window.firebaseDB.ubchCollection.doc('config').get();
                if (ubchDoc.exists && ubchDoc.data().mapping) {
                    this.ubchToCommunityMap = ubchDoc.data().mapping;
                    console.log('‚úÖ Configuraci√≥n CV cargada desde Firebase');
                } else {
                    console.log('‚ö†Ô∏è Configuraci√≥n CV no encontrada en Firebase, usando configuraci√≥n por defecto');
                    await this.saveUBCHConfigToFirebase();
                }
                    
                // Calcular estad√≠sticas claras
                const totalUBCH = this.ubchToCommunityMap && Object.keys(this.ubchToCommunityMap).length || 0;
                const todasLasComunidades = this.ubchToCommunityMap ? Object.values(this.ubchToCommunityMap).flat() : [];
                const comunidadesUnicas = [...new Set(todasLasComunidades)];
                
                console.log(`üìä Configuraci√≥n CV: ${totalUBCH} centros de votaci√≥n, ${comunidadesUnicas.length} comunidades √∫nicas`);
                console.log(`üìã Lista √∫nica de comunidades: (${comunidadesUnicas.length}) [${comunidadesUnicas.join(', ')}]`);
                
                this.ubchConfigLoaded = true;
                    
            } catch (error) {
                console.error('‚ùå Error cargando configuraci√≥n CV:', error);
                // Usar configuraci√≥n por defecto en caso de error
                this._useDefaultConfig();
            }

            this.isLoadingData = false;
            console.log('‚úÖ Datos cargados desde Firebase:', this.votes.length, 'registros');

        } catch (error) {
            console.error('‚ùå Error cargando datos de Firebase:', error);
            console.log('üîÑ Intentando cargar datos locales como fallback');
            this.isLoadingData = false;
            return this.loadDataLocally();
        }
    }

    // M√©todo de fallback para cargar datos locales
    loadDataLocally() {
        try {
            console.log('üì• Cargando datos locales...');
            
            // Cargar votos locales desde localStorage
            const localVotes = localStorage.getItem('localVotes');
            if (localVotes) {
                this.votes = JSON.parse(localVotes);
                console.log(`‚úÖ ${this.votes.length} votos cargados desde localStorage`);
            } else {
                this.votes = [];
                console.log('‚úÖ No hay votos locales, iniciando con lista vac√≠a');
            }
            
            // Usar configuraci√≥n UBCH por defecto
            this.ubchToCommunityMap = {
                "COLEGIO ASUNCION BELTRAN": ["EL VALLE", "VILLA OASIS", "VILLAS DEL CENTRO 1ERA ETAPA", "VILLAS DEL CENTRO 3ERA ETAPA B", "VILLAS DEL CENTRO 3ERA ETAPA C", "VILLAS DEL CENTRO IV ETAPA", "LA CAMACHERA", "CONSOLACI√ìN"],
                "LICEO JOSE FELIX RIBAS": ["EL CUJINAL", "LAS MORAS", "VILLA ESPERANZA 200", "VILLAS DEL CENTRO 3ERA ETAPA A", "LOS PALOMARES", "EL LAGO", "CARABALI I Y II", "EL BANCO", "CARIAPRIMA I Y II", "CONSOLACI√ìN"],
                "ESCUELA PRIMARIA BOLIVARIANA LA PRADERA": ["EL SAMAN", "GUAYABAL E", "PALOS GRANDES II", "PALOS GRANDES I", "TIERRAS DEL SOL", "LA CASTELLANA", "GARDENIAS I", "GARDENIAS II", "EL CERCADITO", "ALTAMIRA", "LA ENSENADA", "BUCARES", "GUAYABAL", "APAMATE", "EL REFUGIO", "LOS ROBLES", "ARAGUANEY", "CONSOLACI√ìN"],
                "CASA COMUNAL JOSE TOMAS GALLARDO": ["JOSE TOMAS GALLARDO A", "JOSE TOMAS GALLARDO B", "ALI PRIMERA", "CONSOLACI√ìN"],
                "ESCUELA 5 DE JULIO": ["10 DE AGOSTO", "CAMPO ALEGRE I", "CAMPO ALEGRE II", "5 DE JULIO", "CONSOLACI√ìN"],
                "ESCUELA CECILIO ACOSTA": ["VOLUNTAD DE DIOS", "LAS MALVINAS", "BRISAS DEL LAGO", "MAISANTA", "INDIANA SUR", "LOS CASTORES", "CONSOLACI√ìN"],
                "ESCUELA BASICA FE Y ALEGRIA": ["FE Y ALEGRIA", "BARRIO SOLIDARIO", "COMUNIDAD FUTURO", "CONSOLACI√ìN"],
                "ESCUELA GRADUADA ANTONIO JOSE DE SUCRE": ["PALO NEGRO OESTE", "JESUS DE NAZARETH", "SECTOR BOLIVAR", "PALO NEGRO ESTE", "CONSOLACI√ìN"],
                "CASA COMUNAL": ["LOS JABILLOS", "CONSOLACI√ìN"],
                "UNIDAD EDUCATIVA MONSE√ëOR JOS√â JACINTO SOTO LAYA": ["PROLONGACION MIRANDA", "SANTA EDUVIGES II", "CONSOLACI√ìN"],
                "BASE DE MISIONES LUISA CACERES DE ARISMENDI": ["4 DE DICIEMBRE", "23 DE ENERO", "19 DE ABRIL", "EL EREIG√úE", "CONSOLACI√ìN"],
                "ESCUELA ESTADAL ALEJO ZULOAGA": ["MANUELITA SAENZ", "PANAMERICANO", "CONSOLACI√ìN"],
                "UNIDAD EDUCATIVA MONSE√ëOR MONTES DE OCA": ["REMATE", "CONSOLACI√ìN"],
                "ESCUELA BASICA NACIONAL CONCENTRADA LA ESTACION": ["18 DE OCTUBRE", "CONSOLACI√ìN"],
                "ESCUELA RECEPTORIA": ["CARMEN CENTRO", "CENTRO CENTRO", "CONSOLACI√ìN"],
                "GRUPO ESCOLAR DR RAFAEL PEREZ": ["VIRGEN DEL CARMEN", "CONSOLACI√ìN"],
                "LICEO ALFREDO PIETRI": ["LOS OJITOS", "LOS VENCEDORES", "CONSOLACI√ìN"],
                "ESCUELA BOLIVARIANA ROMERO GARCIA": ["SAN BERNARDO", "LA CAPILLA", "LAS HACIENDAS", "CONSOLACI√ìN"],
                "ESCUELA GRADUADA PEDRO GUAL": ["BOQUITA CENTRO", "INDIANA NORTE", "CONSOLACI√ìN"]
            };
            
            console.log(`‚úÖ Configuraci√≥n CV cargada: ${Object.keys(this.ubchToCommunityMap).length} CV disponibles`);
            
        } catch (error) {
            console.error('‚ùå Error cargando datos locales:', error);
            this.votes = [];
            this.ubchToCommunityMap = {};
        }
    }

    // Guardar configuraci√≥n UBCH en Firebase
    async saveUBCHConfigToFirebase() {
        try {
            await window.firebaseDB.ubchCollection.doc('config').set({
                mapping: this.ubchToCommunityMap,
                lastUpdated: firebase.firestore.FieldValue.serverTimestamp()
            });
            console.log('‚úÖ Configuraci√≥n CV guardada en Firebase');
        } catch (error) {
            console.error('‚ùå Error guardando configuraci√≥n CV:', error);
        }
    }

    setupRealtimeListener() {
        console.log('üîÑ Configurando listener en tiempo real...');
        
        try {
            // Limpiar listener anterior si existe
            if (this.unsubscribeListener && typeof this.unsubscribeListener === 'function') {
                console.log('üßπ Limpiando listener anterior...');
                this.unsubscribeListener();
            }
            
            // Verificar que Firebase est√© disponible
            if (!window.firebaseDB || !window.firebaseDB.votesCollection) {
                throw new Error('Firebase no est√° disponible');
            }
            
            // Escuchar cambios en tiempo real
            const unsubscribe = window.firebaseDB.votesCollection.onSnapshot((snapshot) => {
                console.log('üì° Cambio detectado en Firebase:', snapshot.docs.length, 'registros');
                
                // Actualizar datos locales
                this.votes = snapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                
                console.log('‚úÖ Datos actualizados localmente');
                
                // Actualizar TODAS las p√°ginas que muestran datos
                this.updateAllDataDisplays();
                
            }, (error) => {
                console.error('‚ùå Error en listener de Firebase:', error);
                this.showMessage('Error de sincronizaci√≥n. Reintentando...', 'error', 'registration');
            });
            
            // Guardar la funci√≥n de unsubscribe para limpiar despu√©s
            this.unsubscribeListener = unsubscribe;
            console.log('‚úÖ Listener en tiempo real configurado correctamente');
            
        } catch (error) {
            console.error('‚ùå Error configurando listener:', error);
            this.unsubscribeListener = null;
        }
    }

    // Funci√≥n para reinicializar el listener de sincronizaci√≥n
    async reinitializeSyncListener() {
        console.log('üîÑ Reinicializando listener de sincronizaci√≥n...');
        
        try {
            // Limpiar listener anterior
            if (this.unsubscribeListener && typeof this.unsubscribeListener === 'function') {
                this.unsubscribeListener();
                this.unsubscribeListener = null;
            }
            
            // Esperar un momento antes de reconfigurar
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Reconfigurar listener
            this.setupRealtimeListener();
            
            console.log('‚úÖ Listener de sincronizaci√≥n reinicializado correctamente');
            
        } catch (error) {
            console.error('‚ùå Error reinicializando listener:', error);
        }
    }

    // Funci√≥n para actualizar todas las pantallas de datos
    updateAllDataDisplays() {
        console.log('üîÑ Actualizando todas las pantallas...');
        
        // Actualizar indicador de sincronizaci√≥n
        this.updateSyncIndicator(true);
        
        // Actualizar contadores en dashboard
        if (this.currentPage === 'dashboard') {
            this.renderDashboardPage();
        }
        
        // Actualizar tabla de listado
        if (this.currentPage === 'listado') {
            this.renderVotesTable();
        }
        
        // Actualizar estad√≠sticas
        if (this.currentPage === 'statistics') {
            this.renderStatisticsPage();
        }
        
        // Actualizar proyecci√≥n si est√° activa
        if (document.getElementById('projection-view').style.display !== 'none') {
            this.updateProjection();
        }
        
        // Mostrar notificaci√≥n de actualizaci√≥n
        this.showRealtimeUpdate('Datos actualizados en tiempo real');
    }

    // Actualizar indicador de sincronizaci√≥n
    updateSyncIndicator(synced = false, error = false) {
        const indicator = document.getElementById('sync-indicator');
        const text = document.getElementById('sync-text');
        const spinner = document.getElementById('sync-spinner');
        const check = document.getElementById('sync-check');
        
        if (error) {
            indicator.textContent = '‚ùå';
            indicator.className = 'sync-indicator error';
            text.textContent = 'Error de conexi√≥n';
            text.className = 'sync-text error';
            if (spinner) spinner.style.display = 'none';
            if (check) { check.style.display = 'none'; check.classList.remove('active'); }
        } else if (synced) {
            indicator.textContent = '';
            indicator.className = 'sync-indicator synced';
            text.textContent = 'Sincronizado';
            text.className = 'sync-text synced';
            if (spinner) spinner.style.display = 'none';
            if (check) { check.style.display = 'inline-block'; setTimeout(() => check.classList.add('active'), 50); }
            // Volver a estado de sincronizaci√≥n despu√©s de 3 segundos
            setTimeout(() => {
                indicator.textContent = '';
                indicator.className = 'sync-indicator';
                text.textContent = 'Sincronizando';
                text.className = 'sync-text';
                if (spinner) spinner.style.display = 'inline-block';
                if (check) { check.style.display = 'none'; check.classList.remove('active'); }
            }, 3000);
        } else {
            indicator.textContent = '';
            indicator.className = 'sync-indicator';
            text.textContent = 'Sincronizando';
            text.className = 'sync-text';
            if (spinner) spinner.style.display = 'inline-block';
            if (check) { check.style.display = 'none'; check.classList.remove('active'); }
        }
    }

    // Mostrar notificaci√≥n de actualizaci√≥n en tiempo real
    showRealtimeUpdate(message) {
        // Remover notificaci√≥n anterior si existe
        const existingNotification = document.querySelector('.realtime-update');
        if (existingNotification) {
            existingNotification.remove();
        }
        
        // Crear nueva notificaci√≥n
        const notification = document.createElement('div');
        notification.className = 'realtime-update';
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // Remover despu√©s de 3 segundos
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 3000);
    }

    async saveVoteToFirebase(voteData) {
        try {
            console.log('üíæ Guardando en Firebase:', voteData);
            
            // Verificar si Firebase est√° disponible
            if (!window.firebaseDB || !window.firebaseDB.votesCollection) {
                console.log('‚ö†Ô∏è Firebase no disponible, guardando localmente');
                return this.saveVoteLocally(voteData);
            }
            
            const docRef = await window.firebaseDB.votesCollection.add({
                ...voteData,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            
            console.log('‚úÖ Datos guardados en Firebase con ID:', docRef.id);
            return docRef.id;
        } catch (error) {
            console.error('‚ùå Error guardando en Firebase:', error);
            console.log('üîÑ Intentando guardar localmente como fallback');
            return this.saveVoteLocally(voteData);
        }
    }

    // M√©todo de fallback para guardar localmente
    saveVoteLocally(voteData) {
        try {
            const localId = 'local_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            const localVote = {
                id: localId,
                ...voteData,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
                isLocal: true
            };
            
            // Agregar a la lista local
            this.votes.push(localVote);
            
            // Guardar en localStorage
            localStorage.setItem('localVotes', JSON.stringify(this.votes.filter(v => v.isLocal)));
            
            console.log('‚úÖ Datos guardados localmente con ID:', localId);
            return localId;
        } catch (error) {
            console.error('‚ùå Error guardando localmente:', error);
            throw new Error('No se pudo guardar el registro');
        }
    }

    async updateVoteInFirebase(voteId, updateData) {
        try {
            await window.firebaseDB.votesCollection.doc(voteId).update({
                ...updateData,
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            });
        } catch (error) {
            console.error('Error actualizando en Firebase:', error);
            throw error;
        }
    }

    async deleteVoteFromFirebase(voteId) {
        try {
            await window.firebaseDB.votesCollection.doc(voteId).delete();
        } catch (error) {
            console.error('Error eliminando de Firebase:', error);
            throw error;
        }
    }

    // Resto de m√©todos igual que el script original...
    generateUserId() {
        return 'user_' + Math.random().toString(36).substr(2, 9);
    }

    // M√©todo para obtener el usuario actual (compatible con Firebase)
    getCurrentUser() {
        try {
            const userData = localStorage.getItem('currentUser');
            if (!userData) return null;
            
            const user = JSON.parse(userData);
            const sessionTime = localStorage.getItem('sessionTime');
            
            // Verificar si la sesi√≥n ha expirado (24 horas)
            if (sessionTime && (Date.now() - parseInt(sessionTime)) > 24 * 60 * 60 * 1000) {
                this.logout();
                return null;
            }
            
            return user;
        } catch (error) {
            console.error('Error al verificar sesi√≥n:', error);
            return null;
        }
    }

    // M√©todo de logout espec√≠fico para Firebase
    logout() {
        localStorage.removeItem('currentUser');
        localStorage.removeItem('sessionTime');
        if (window.location.pathname !== '/login.html') {
            window.location.href = 'login.html';
        }
    }

    validateRegistrationData(data) {
        // Validar c√©dula
        if (!data.cedula || !/^\d{6,10}$/.test(data.cedula)) {
            return { isValid: false, message: 'C√©dula inv√°lida. Debe tener entre 6 y 10 d√≠gitos' };
        }

        // Validar nombre
        if (!data.name || data.name.trim().length < 3) {
            return { isValid: false, message: 'Nombre inv√°lido. Debe tener al menos 3 caracteres' };
        }

        // Validar tel√©fono
        if (!data.telefono || !/^04\d{9}$/.test(data.telefono)) {
            return { isValid: false, message: 'Tel√©fono inv√°lido. Debe tener formato: 04xxxxxxxxx' };
        }

        // Validar sexo
        if (!data.sexo || !['M', 'F'].includes(data.sexo)) {
            return { isValid: false, message: 'Debe seleccionar el sexo' };
        }

        // Validar edad
        if (!data.edad || isNaN(data.edad) || data.edad < 16 || data.edad > 120) {
            return { isValid: false, message: 'Edad inv√°lida. Debe estar entre 16 y 120 a√±os' };
        }

        // Validar Centro de Votaci√≥n y comunidad
        if (!data.ubch || !data.community) {
            return { isValid: false, message: 'Debe seleccionar Centro de Votaci√≥n y comunidad' };
        }

        return { isValid: true, message: 'Datos v√°lidos' };
    }

    async handleRegistration() {
        const form = document.getElementById('registration-form');
        if (!form) {
            console.error('‚ùå Formulario de registro no encontrado');
            this.showMessage('Error: Formulario no encontrado.', 'error', 'registration');
            return;
        }
        
        const formData = new FormData(form);
        
        const name = formData.get('name')?.trim();
        const cedula = formData.get('cedula')?.trim();
        const telefono = formData.get('telefono')?.trim();
        const sexo = formData.get('sexo');
        const edad = formData.get('edad');
        const ubch = formData.get('ubch');
        const community = formData.get('community');

        console.log('üìù Datos del formulario:', { name, cedula, telefono, sexo, edad, ubch, community });

        // Validaci√≥n inicial (tel√©fono es opcional)
        if (!name || !cedula || !sexo || !edad || !ubch || !community) {
            this.showMessage('Por favor, completa todos los campos obligatorios.', 'error', 'registration');
            return;
        }

        // Validaci√≥n de c√©dula
        if (!/^\d{6,10}$/.test(cedula)) {
            this.showMessage('La c√©dula debe tener entre 6 y 10 d√≠gitos num√©ricos.', 'error', 'registration');
            return;
        }

        // Validaci√≥n de edad
        const edadNum = parseInt(edad);
        if (isNaN(edadNum) || edadNum < 16 || edadNum > 120) {
            this.showMessage('La edad debe estar entre 16 y 120 a√±os.', 'error', 'registration');
            return;
        }

        // Validaci√≥n de tel√©fono (opcional pero si se proporciona debe ser v√°lido)
        if (telefono && !/^04\d{9}$/.test(telefono)) {
            this.showMessage('El tel√©fono debe tener el formato 04xxxxxxxxx.', 'error', 'registration');
            return;
        }

        // Preparar datos
        const registrationData = {
            name,
            cedula: cedula.replace(/\D/g, ''),
            telefono: telefono ? telefono.replace(/\D/g, '') : '',
            sexo,
            edad: edadNum,
            ubch,
            community,
            registeredBy: normalizarUsuario(this.getCurrentUser()?.username || this.userId),
            voted: false,
            registeredAt: new Date().toISOString(),
            createdAt: new Date().toISOString()
        };

        console.log('üìã Datos preparados para registro:', registrationData);

        this.setLoadingState('registration', true);

        try {
            // Usar el sistema de cola offline
            if (window.offlineQueueManager) {
                const registroId = window.offlineQueueManager.guardarEnColaLocal(registrationData);
                this.showMessage('‚úÖ Registro guardado localmente. Se sincronizar√° autom√°ticamente cuando haya conexi√≥n.', 'success', 'registration');
                this.showMessage('üë§ Nuevo registro: ' + name + ' en ' + community, 'success', 'registration');
                await this.generateThankYouMessage(name, ubch, community);
                form.reset();
                const stats = window.offlineQueueManager.obtenerEstadisticasCola();
                window.offlineQueueManager.actualizarIndicadorCola(stats.total);
                
                // ASEGURAR que se guarde tambi√©n en "Mis Registros"
                if (typeof guardarRegistroLocal === 'function') {
                    guardarRegistroLocal({
                        nombre: name,
                        cedula: registrationData.cedula,
                        telefono: registrationData.telefono,
                        sexo: sexo,
                        edad: edadNum,
                        ubch: ubch,
                        comunidad: community,
                        fecha: new Date().toLocaleString()
                    });
                }
                
                if (window.renderMyRecordsTable) window.renderMyRecordsTable();
            } else {
                console.warn('‚ö†Ô∏è Gestor offline no disponible, usando sistema anterior');
                await this.saveVoteToFirebase(registrationData);
                this.showMessage('‚úÖ Registro guardado exitosamente.', 'success', 'registration');
                this.showMessage('üë§ Nuevo registro: ' + name + ' en ' + community, 'success', 'registration');
                await this.generateThankYouMessage(name, ubch, community);
                form.reset();
                
                // ASEGURAR que se guarde tambi√©n en "Mis Registros"
                if (typeof guardarRegistroLocal === 'function') {
                    guardarRegistroLocal({
                        nombre: name,
                        cedula: registrationData.cedula,
                        telefono: registrationData.telefono,
                        sexo: sexo,
                        edad: edadNum,
                        ubch: ubch,
                        comunidad: community,
                        fecha: new Date().toLocaleString()
                    });
                }
            }
        } catch (error) {
            console.error('‚ùå Error al registrar:', error);
            this.showMessage('Error al registrar persona. Int√©ntalo de nuevo.', 'error', 'registration');
        } finally {
            this.setLoadingState('registration', false);
        }
    }

    /**
     * Actualizar estado de la cola en la interfaz
     */
    updateQueueStatus() {
        if (!window.queueManager) return;
        
        const stats = window.queueManager.getQueueStats();
        const queueStatusElement = document.getElementById('queue-status');
        
        if (queueStatusElement) {
            if (stats.total > 0) {
                queueStatusElement.innerHTML = `
                    <div class="queue-info">
                        <span class="queue-count">üìã ${stats.total} en cola</span>
                        <span class="queue-status ${stats.isOnline ? 'online' : 'offline'}">
                            ${stats.isOnline ? 'üåê En l√≠nea' : 'üì¥ Sin conexi√≥n'}
                        </span>
                        ${stats.isProcessing ? '<span class="processing">üîÑ Procesando...</span>' : ''}
                    </div>
                `;
                queueStatusElement.style.display = 'block';
            } else {
                queueStatusElement.style.display = 'none';
            }
        }
    }

    async confirmVote(personId) {
        try {
            console.log('‚úÖ Confirmando voto para ID:', personId);
            
            // Verificar que el ID existe en los datos locales
            const vote = this.votes.find(v => v.id === personId);
            if (!vote) {
                console.error('‚ùå Voto no encontrado localmente con ID:', personId);
                this.showMessage('Error: Voto no encontrado. Intenta buscar nuevamente.', 'error', 'check-in');
                return;
            }
            
            // Verificar que el ID no sea temporal (empiece con 'local_')
            if (personId.startsWith('local_')) {
                console.error('‚ùå ID temporal detectado:', personId);
                this.showMessage('Error: ID temporal detectado. Intenta buscar nuevamente.', 'error', 'check-in');
                return;
            }
            
            // Actualizar en Firebase
            await this.updateVoteInFirebase(personId, {
                voted: true,
                voteTimestamp: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            });
            
            // Actualizar localmente tambi√©n
            const voteIndex = this.votes.findIndex(v => v.id === personId);
            if (voteIndex !== -1) {
                this.votes[voteIndex].voted = true;
                this.votes[voteIndex].voteTimestamp = new Date().toISOString();
            }
            
            this.showMessage('¬°Voto confirmado con √©xito!', 'success', 'check-in');
            
            // Enviar notificaci√≥n global
            this.showMessage(`üéØ Voto confirmado: ${vote.name} en ${vote.community}`, 'success', true);
            
            document.getElementById('cedula-search').value = '';
            document.getElementById('search-results').innerHTML = '';
            
            // Actualizar todas las pantallas que muestran datos
            this.updateAllDataDisplays();
            
        } catch (error) {
            console.error('‚ùå Error al confirmar voto:', error);
            
            // Si el error es que el documento no existe, intentar sincronizar y buscar nuevamente
            if (error.message && error.message.includes('No document to update')) {
                console.log('üîÑ Documento no encontrado, sincronizando datos...');
                this.showMessage('Sincronizando datos...', 'info', 'check-in');
                
                try {
                    await this.loadDataFromFirebase();
                    this.showMessage('Datos sincronizados. Intenta confirmar el voto nuevamente.', 'info', 'check-in');
                } catch (syncError) {
                    console.error('‚ùå Error sincronizando datos:', syncError);
                    this.showMessage('Error de sincronizaci√≥n. Int√©ntalo de nuevo.', 'error', 'check-in');
                }
            } else {
            this.showMessage('Error al confirmar el voto. Int√©ntalo de nuevo.', 'error', 'check-in');
            }
        }
    }

    async confirmDelete() {
        if (!this.voteToDelete) return;
        // Bloquear eliminaci√≥n de registros locales
        if (this.voteToDelete.startsWith('local_')) {
            this.showMessage('Este registro a√∫n no ha sido sincronizado. Por favor, espera a que se sincronice para poder eliminarlo.', 'warning', 'listado');
            this.closeDeleteModal();
            return;
        }
        try {
            await this.deleteVoteFromFirebase(this.voteToDelete);
            
            // Enviar notificaci√≥n global
            this.showMessage(`‚ùå Registro eliminado del sistema`, 'warning', true);
            
            // Recargar datos desde Firebase para reflejar el cambio
            await this.loadDataFromFirebase();
            this.closeDeleteModal();
        } catch (error) {
            console.error('Error al eliminar:', error);
            this.showMessage('Error al eliminar el registro.', 'error', 'listado');
        }
    }

    // M√©todos de renderizado (igual que el original)
    setupEventListeners() {
        // Navegaci√≥n
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.navigateToPage(e.target.dataset.page);
            });
        });

        // Formulario de registro
        document.getElementById('registration-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleRegistration();
        });

        // Formulario de confirmaci√≥n de voto
        document.getElementById('check-in-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleCheckIn();
        });

        // Formulario de edici√≥n
        document.getElementById('edit-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleEditSubmit(e);
        });

        // Los selects de comunidad y CV son independientes, no necesitan event listeners de vinculaci√≥n

        // Botones del modal de eliminaci√≥n
        document.getElementById('cancel-delete').addEventListener('click', () => {
            this.closeDeleteModal();
        });

        document.getElementById('confirm-delete').addEventListener('click', () => {
            this.confirmDelete();
        });

        // Botones del modal de edici√≥n
        document.getElementById('cancel-edit').addEventListener('click', () => {
            this.closeEditModal();
        });

        // Cerrar modales al hacer clic fuera de ellos
        window.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                e.target.style.display = 'none';
                if (e.target.id === 'delete-modal') {
                    this.closeDeleteModal();
                } else if (e.target.id === 'edit-modal') {
                    this.closeEditModal();
                }
            }
        });

        // Mostrar ID de usuario
        document.getElementById('userId').textContent = this.userId;

        // Listeners para exportar PDF y CSV
        const pdfBtn = document.getElementById('export-pdf-btn');
        if (pdfBtn) {
            pdfBtn.addEventListener('click', () => this.exportToPDF());
        }
        const csvBtn = document.getElementById('export-csv-btn');
        if (csvBtn) {
            csvBtn.addEventListener('click', () => this.exportToCSVSmart());
        }

        // Filtros
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.handleFilterChange(e.target.dataset.filter);
            });
        });

        // Filtro por UBCH
        const ubchFilterSelect = document.getElementById('ubch-filter-select');
        if (ubchFilterSelect) {
            ubchFilterSelect.addEventListener('change', () => {
                this.applyFilters();
            });
        }

        // Filtro por Comunidad
        const communityFilterSelect = document.getElementById('community-filter-select');
        if (communityFilterSelect) {
            communityFilterSelect.addEventListener('change', () => {
                this.applyFilters();
            });
        }

        // 1. M√©todos para el modo proyecci√≥n
        this.setupProjectionEvents();
    }

    navigateToPage(page) {
        // Verificar permisos seg√∫n el rol del usuario
        const currentUser = this.getCurrentUser();
        if (!currentUser) {
            console.log('Usuario no autenticado');
            return;
        }

        // Control de acceso por rol
        if (currentUser.rol === 'verificador') {
            // Los verificadores solo pueden acceder a la p√°gina de confirmaci√≥n de votos
            if (page !== 'check-in') {
                this.showMessage('No tienes permisos para acceder a esta p√°gina.', 'error', 'check-in');
                return;
            }
        } else if (currentUser.rol === 'registrador') {
            // Los registradores solo pueden acceder a la p√°gina de registro
            if (page !== 'registration') {
                this.showMessage('No tienes permisos para acceder a esta p√°gina.', 'error', 'registration');
                return;
            }
        }

        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        const navBtn = document.querySelector(`[data-page="${page}"]`);
        if (navBtn) {
            navBtn.classList.add('active');
        }

        document.querySelectorAll('.page').forEach(p => {
            p.classList.remove('active');
        });

        const pageElement = document.getElementById(`${page}-page`);
        if (pageElement) {
            pageElement.classList.add('active');
        }
        this.currentPage = page;
        this.renderCurrentPage();
    }

    renderCurrentPage() {
        console.log('üîç DEBUG: renderCurrentPage llamado con currentPage:', this.currentPage);
        switch (this.currentPage) {
            case 'registration':
                console.log('üîç DEBUG: Renderizando p√°gina de registro...');
                this.renderRegistrationPage();
                break;
            case 'check-in':
                console.log('üîç DEBUG: Renderizando p√°gina de check-in...');
                this.renderCheckInPage();
                break;
            case 'listado':
                console.log('üîç DEBUG: Renderizando p√°gina de listado...');
                this.renderListPage();
                break;
            case 'dashboard':
                console.log('üîç DEBUG: Renderizando p√°gina de dashboard...');
                this.renderDashboardPage();
                break;
            case 'statistics':
                console.log('üîç DEBUG: Renderizando p√°gina de estad√≠sticas...');
                this.renderStatisticsPage();
                break;
            default:
                console.log('üîç DEBUG: P√°gina no reconocida:', this.currentPage);
        }
    }

    renderRegistrationPage() {
        console.log('üîç DEBUG: Iniciando renderRegistrationPage...');
        console.log('üîç DEBUG: this.ubchToCommunityMap:', this.ubchToCommunityMap);
        console.log('üîç DEBUG: Tipo de ubchToCommunityMap:', typeof this.ubchToCommunityMap);
        console.log('üîç DEBUG: Keys de ubchToCommunityMap:', Object.keys(this.ubchToCommunityMap));

        const ubchSelect = document.getElementById('ubch');
        const communitySelect = document.getElementById('community');
        const form = document.getElementById('registration-form');

        console.log('üîç DEBUG: Elementos del DOM encontrados:', {
            ubchSelect: !!ubchSelect,
            communitySelect: !!communitySelect,
            form: !!form
        });

        if (!ubchSelect || !communitySelect || !form) {
            console.error('‚ùå Elementos del formulario no encontrados');
            return;
        }

        // Limpiar selects
        ubchSelect.innerHTML = '<option value="">Selecciona un Centro de Votaci√≥n (CV)</option>';
        communitySelect.innerHTML = '<option value="">Selecciona una comunidad</option>';

        // Verificar si hay datos disponibles
        if (!this.ubchToCommunityMap || Object.keys(this.ubchToCommunityMap).length === 0) {
            console.log('‚ö†Ô∏è No hay datos disponibles, intentando recargar...');
            console.log('üîç DEBUG: ubchToCommunityMap est√° vac√≠o o no definido');
            
            // Evitar bucle infinito - solo intentar recargar una vez
            if (this._reloadAttempted) {
                console.log('‚ö†Ô∏è Ya se intent√≥ recargar una vez, usando configuraci√≥n por defecto');
                this._useDefaultConfig();
                return;
            }
            
            this._reloadAttempted = true;
            form.querySelectorAll('input, select, button').forEach(el => el.disabled = true);
            this.showMessage('Cargando datos...', 'info', 'registration');
            
            // Intentar recargar la configuraci√≥n
            this.loadDataFromFirebase().then(() => {
                console.log('üîç DEBUG: Datos recargados, renderizando de nuevo...');
                this.renderRegistrationPage();
            }).catch(error => {
                console.error('‚ùå Error recargando datos:', error);
                this.showMessage('Error cargando datos. Contacte al administrador.', 'error', 'registration');
                this._useDefaultConfig();
            });
            return;
        }

        // Resetear flag de recarga
        this._reloadAttempted = false;

        console.log('üîç DEBUG: Datos disponibles, procediendo a cargar formulario...');

        // Habilitar formulario
        form.querySelectorAll('input, select, button').forEach(el => el.disabled = false);

        // Cargar todas las comunidades disponibles (sin vinculaci√≥n)
        const todasLasComunidades = new Set();
        Object.values(this.ubchToCommunityMap).forEach(comunidades => {
            if (Array.isArray(comunidades)) {
            comunidades.forEach(comunidad => todasLasComunidades.add(comunidad));
            }
        });

        console.log('üîç DEBUG: Comunidades encontradas:', Array.from(todasLasComunidades));

        // Llenar select de comunidades (independiente)
        console.log(`üîÑ Cargando ${todasLasComunidades.size} comunidades en el formulario...`);
        console.log('üìã Lista completa de comunidades:', Array.from(todasLasComunidades).sort());
        
        Array.from(todasLasComunidades).sort().forEach(comunidad => {
            const option = document.createElement('option');
            option.value = comunidad;
            option.textContent = comunidad;
            communitySelect.appendChild(option);
        });

        // Llenar select de Centros de Votaci√≥n (independiente)
        console.log(`üîÑ Cargando ${Object.keys(this.ubchToCommunityMap).length} Centros de Votaci√≥n en el formulario...`);
        Object.keys(this.ubchToCommunityMap).sort().forEach(ubch => {
            const option = document.createElement('option');
            option.value = ubch;
            option.textContent = ubch;
            ubchSelect.appendChild(option);
        });
        
        console.log('‚úÖ Datos cargados correctamente en el formulario');
        console.log(`üìä Resumen: ${todasLasComunidades.size} comunidades, ${Object.keys(this.ubchToCommunityMap).length} centros de votaci√≥n`);
        this.showMessage(`Formulario listo con ${todasLasComunidades.size} comunidades disponibles`, 'success', 'registration');

        // Inicializar Choices.js para el autocompletado de comunidades si est√° disponible
        if (window.initializeChoicesForCommunity) {
            setTimeout(() => {
                window.initializeChoicesForCommunity();
            }, 100);
        }

        // Iniciar sincronizaci√≥n autom√°tica si est√° disponible
        if (window.offlineQueueManager) {
            window.offlineQueueManager.iniciarSincronizacionAutomatica();
        }

        // Actualizar indicadores de estado offline
        this.actualizarIndicadorOffline();
        this.actualizarFormularioOffline();
    }

    // M√©todo para usar configuraci√≥n por defecto cuando no se pueden cargar los datos
    _useDefaultConfig() {
        console.log('üîÑ Usando configuraci√≥n por defecto...');
        
        // Configuraci√≥n por defecto
        this.ubchToCommunityMap = {
            "COLEGIO ASUNCION BELTRAN": ["EL VALLE", "VILLA OASIS", "VILLAS DEL CENTRO 1ERA ETAPA", "VILLAS DEL CENTRO 3ERA ETAPA B", "VILLAS DEL CENTRO 3ERA ETAPA C", "VILLAS DEL CENTRO IV ETAPA", "LA CAMACHERA", "CONSOLACI√ìN"],
            "LICEO JOSE FELIX RIBAS": ["EL CUJINAL", "LAS MORAS", "VILLA ESPERANZA 200", "VILLAS DEL CENTRO 3ERA ETAPA A", "LOS PALOMARES", "EL LAGO", "CARABALI I Y II", "EL BANCO", "CARIAPRIMA I Y II", "CONSOLACI√ìN"],
            "ESCUELA PRIMARIA BOLIVARIANA LA PRADERA": ["EL SAMAN", "GUAYABAL E", "PALOS GRANDES II", "PALOS GRANDES I", "TIERRAS DEL SOL", "LA CASTELLANA", "GARDENIAS I", "GARDENIAS II", "EL CERCADITO", "ALTAMIRA", "LA ENSENADA", "BUCARES", "GUAYABAL", "APAMATE", "EL REFUGIO", "LOS ROBLES", "ARAGUANEY", "CONSOLACI√ìN"],
            "CASA COMUNAL JOSE TOMAS GALLARDO": ["JOSE TOMAS GALLARDO A", "JOSE TOMAS GALLARDO B", "ALI PRIMERA", "CONSOLACI√ìN"],
            "ESCUELA 5 DE JULIO": ["10 DE AGOSTO", "CAMPO ALEGRE I", "CAMPO ALEGRE II", "5 DE JULIO", "CONSOLACI√ìN"],
            "ESCUELA CECILIO ACOSTA": ["VOLUNTAD DE DIOS", "LAS MALVINAS", "BRISAS DEL LAGO", "MAISANTA", "INDIANA SUR", "LOS CASTORES", "CONSOLACI√ìN"],
            "ESCUELA BASICA FE Y ALEGRIA": ["FE Y ALEGRIA", "BARRIO SOLIDARIO", "COMUNIDAD FUTURO", "CONSOLACI√ìN"],
            "ESCUELA GRADUADA ANTONIO JOSE DE SUCRE": ["PALO NEGRO OESTE", "JESUS DE NAZARETH", "SECTOR BOLIVAR", "PALO NEGRO ESTE", "CONSOLACI√ìN"],
            "CASA COMUNAL": ["LOS JABILLOS", "CONSOLACI√ìN"],
            "UNIDAD EDUCATIVA MONSE√ëOR JOS√â JACINTO SOTO LAYA": ["PROLONGACION MIRANDA", "SANTA EDUVIGES II", "CONSOLACI√ìN"],
            "BASE DE MISIONES LUISA CACERES DE ARISMENDI": ["4 DE DICIEMBRE", "23 DE ENERO", "19 DE ABRIL", "EL EREIG√úE", "CONSOLACI√ìN"],
            "ESCUELA ESTADAL ALEJO ZULOAGA": ["MANUELITA SAENZ", "PANAMERICANO", "CONSOLACI√ìN"],
            "UNIDAD EDUCATIVA MONSE√ëOR MONTES DE OCA": ["REMATE", "CONSOLACI√ìN"],
            "ESCUELA BASICA NACIONAL CONCENTRADA LA ESTACION": ["18 DE OCTUBRE", "CONSOLACI√ìN"],
            "ESCUELA RECEPTORIA": ["CARMEN CENTRO", "CENTRO CENTRO", "CONSOLACI√ìN"],
            "GRUPO ESCOLAR DR RAFAEL PEREZ": ["VIRGEN DEL CARMEN", "CONSOLACI√ìN"],
            "LICEO ALFREDO PIETRI": ["LOS OJITOS", "LOS VENCEDORES", "CONSOLACI√ìN"],
            "ESCUELA BOLIVARIANA ROMERO GARCIA": ["SAN BERNARDO", "LA CAPILLA", "LAS HACIENDAS", "CONSOLACI√ìN"],
            "ESCUELA GRADUADA PEDRO GUAL": ["BOQUITA CENTRO", "INDIANA NORTE", "CONSOLACI√ìN"]
        };
        
        // Habilitar formulario
        const form = document.getElementById('registration-form');
        if (form) {
            form.querySelectorAll('input, select, button').forEach(el => el.disabled = false);
        }
        
        // Renderizar con configuraci√≥n por defecto
        this.renderRegistrationPage();
        
        this.showMessage('Sistema funcionando con configuraci√≥n por defecto', 'warning', 'registration');
    }

    // Los selects de comunidad y CV son independientes, no necesitan funciones de vinculaci√≥n

    // === FUNCIONES PARA SISTEMA OFFLINE ===

    // Actualizar indicador de estado offline en el header
    actualizarIndicadorOffline() {
        const indicator = document.getElementById('offline-indicator');
        if (!indicator) return;

        if (window.offlineQueueManager) {
            const stats = window.offlineQueueManager.obtenerEstadisticasCola();
            
            if (!stats.online) {
                indicator.className = 'offline-indicator show offline';
                indicator.innerHTML = '<span class="offline-icon">üì¥</span><span class="offline-text">Sin conexi√≥n</span>';
            } else {
                indicator.className = 'offline-indicator show online';
                indicator.innerHTML = '<span class="offline-icon">üåê</span><span class="offline-text">En l√≠nea</span>';
            }
        }
    }

    // Actualizar clase del formulario seg√∫n estado de conexi√≥n
    actualizarFormularioOffline() {
        const form = document.getElementById('registration-form');
        if (!form) return;

        if (window.offlineQueueManager) {
            const stats = window.offlineQueueManager.obtenerEstadisticasCola();
            
            if (!stats.online) {
                form.classList.add('offline-mode');
            } else {
                form.classList.remove('offline-mode');
            }
        }
    }

    // Inicializar sistema offline
    inicializarSistemaOffline() {
        if (window.offlineQueueManager) {
            // Actualizar indicadores iniciales
            this.actualizarIndicadorOffline();
            this.actualizarFormularioOffline();
            
            // Configurar listeners para cambios de estado
            window.addEventListener('online', () => {
                this.actualizarIndicadorOffline();
                this.actualizarFormularioOffline();
            });
            
            window.addEventListener('offline', () => {
                this.actualizarIndicadorOffline();
                this.actualizarFormularioOffline();
            });
            
            console.log('‚úÖ Sistema offline inicializado correctamente');
        }
    }

    // === FIN FUNCIONES OFFLINE ===

    renderCheckInPage() {
        // La p√°gina ya est√° renderizada en el HTML
    }

    async handleCheckIn() {
        const cedula = document.getElementById('cedula-search').value.trim();
        
        if (!cedula) {
            this.showMessage('Por favor, ingresa un n√∫mero de c√©dula para buscar.', 'error', 'check-in');
            return;
        }

        // Limpiar c√©dula (solo n√∫meros)
        const cleanCedula = cedula.replace(/\D/g, '');
        
        if (cleanCedula.length < 6 || cleanCedula.length > 10) {
            this.showMessage('Por favor, ingresa una c√©dula v√°lida (6 a 10 d√≠gitos).', 'error', 'check-in');
            return;
        }

        this.setLoadingState('check-in', true);

        try {
            // Siempre sincronizar datos antes de buscar para asegurar datos actualizados
            console.log('üîÑ Sincronizando datos antes de buscar...');
            await this.loadDataFromFirebase();
            
            // Buscar en datos sincronizados
            let results = this.votes.filter(vote => vote.cedula === cleanCedula);
            
            // Verificar que los resultados tengan IDs v√°lidos (no temporales)
            results = results.filter(vote => !vote.id.startsWith('local_'));
        
        if (results.length === 0) {
                this.showMessage(`No se encontr√≥ a ninguna persona con la c√©dula ${cleanCedula}.`, 'error', 'check-in');
            return;
        }

        this.renderSearchResults(results);
            this.showMessage(`Se encontr√≥ ${results.length} persona(s) con la c√©dula ${cleanCedula}.`, 'success', 'check-in');
            
        } catch (error) {
            console.error('‚ùå Error en b√∫squeda:', error);
            this.showMessage('Error al buscar. Int√©ntalo de nuevo.', 'error', 'check-in');
        } finally {
            this.setLoadingState('check-in', false);
        }
    }

    renderSearchResults(results) {
        const container = document.getElementById('search-results');
        container.innerHTML = '';

        results.forEach(person => {
            const div = document.createElement('div');
            div.className = 'search-result-item';
            
            // Verificar si la persona ya vot√≥
            const yaVoto = person.voted === true;
            
            div.innerHTML = `
                <div class="search-result-info">
                    <h4>${person.name}</h4>
                    <p>C√©dula: ${person.cedula}</p>
                    <p>Sexo: ${person.sexo === 'M' ? 'Masculino' : person.sexo === 'F' ? 'Femenino' : 'N/A'}</p>
                    <p>Edad: ${person.edad || 'N/A'} a√±os</p>
                    <p>CV: ${person.ubch}</p>
                    <p>Comunidad: ${person.community}</p>
                    <p class="vote-status-info">
                        <strong>Estado del voto:</strong> 
                        <span class="vote-status ${yaVoto ? 'voted' : 'not-voted'}">
                            ${yaVoto ? 'üéØ Ya confirmado' : '‚è≥ Pendiente de confirmar'}
                        </span>
                    </p>
                </div>
                ${yaVoto ? 
                    '<div class="already-voted-message">Esta c√©dula ya fue confirmada anteriormente</div>' :
                    `<button class="btn btn-success" onclick="votingSystem.confirmVote('${person.id}')">
                        Confirmar Voto
                    </button>`
                }
            `;
            container.appendChild(div);
        });
    }

    renderListPage() {
        console.log('üîÑ Renderizando p√°gina de listado...');
        console.log(`üìä Total de votos cargados: ${this.votes.length}`);
        console.log('üìã Primeros 3 votos:', this.votes.slice(0, 3));
        
        this.renderVotesTable();
        this.setupListPageEventListeners();
        
        // Debug despu√©s de renderizar
        setTimeout(() => {
            this.debugListPage();
        }, 100);
    }

    setupListPageEventListeners() {
        // B√∫squeda
        const searchInput = document.getElementById('list-search');
        const clearSearchBtn = document.getElementById('clear-search');
        const searchFieldSelect = document.getElementById('search-field');

        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.handleSearch(e.target.value);
                clearSearchBtn.style.display = e.target.value ? 'block' : 'none';
            });
        }

        if (clearSearchBtn) {
            clearSearchBtn.addEventListener('click', () => {
                searchInput.value = '';
                this.handleSearch('');
                clearSearchBtn.style.display = 'none';
            });
        }

        // Ordenamiento
        document.querySelectorAll('.sortable-header').forEach(header => {
            header.addEventListener('click', (e) => {
                const sortField = e.target.dataset.sort;
                this.handleSort(sortField);
            });
        });

        // Filtros principales (Todos, Votaron, No Votaron)
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const filter = e.target.closest('.filter-btn').dataset.filter;
                this.handleFilterChange(filter);
            });
        });

        // Filtro de edad
        const ageFilter = document.getElementById('age-filter-select');
        if (ageFilter) {
            ageFilter.addEventListener('change', () => {
                this.applyFilters();
            });
        }

        // Selecci√≥n masiva
        const selectAllCheckbox = document.getElementById('select-all-checkbox');
        const headerCheckbox = document.getElementById('header-checkbox');

        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', (e) => {
                this.toggleSelectAll(e.target.checked);
            });
        }

        if (headerCheckbox) {
            headerCheckbox.addEventListener('change', (e) => {
                this.toggleSelectAll(e.target.checked);
            });
        }

        // Paginaci√≥n
        this.setupPaginationEventListeners();
    }

    renderVotesTable() {
        const tbody = document.querySelector('#registros-table tbody');
        tbody.innerHTML = '';

        // Poblar los selectores de filtro con las opciones disponibles
        this.populateUBCHFilter();
        this.populateCommunityFilter();

        // Inicializar votos filtrados con todos los votos
        this.filteredVotes = [...this.votes];
        this.currentPage = 1;

        // Actualizar todos los contadores
        this.updateAllCounters();

        // Aplicar filtros y renderizar tabla
        this.applyFilters();
    }
    
    // Nuevo m√©todo para renderizar votos filtrados optimizado
    renderFilteredVotesTable(filteredVotes) {
        const tbody = document.querySelector('#registros-table tbody');
        if (!tbody) {
            console.error('‚ùå No se encontr√≥ el tbody de la tabla');
            return;
        }
        
        // Usar DocumentFragment para optimizar el renderizado
        const fragment = document.createDocumentFragment();

        console.log(`üîÑ Renderizando ${filteredVotes.length} votos en la tabla`);

        // Obtener registros de la p√°gina actual
        const pageSize = this.pageSize || 20;
        const startIndex = (this.currentPage - 1) * pageSize;
        const endIndex = startIndex + pageSize;
        const pageVotes = filteredVotes.slice(startIndex, endIndex);

        console.log(`üìÑ P√°gina ${this.currentPage}: mostrando registros ${startIndex + 1} a ${endIndex} de ${filteredVotes.length} total`);

        // Renderizar votos de la p√°gina actual usando DocumentFragment
        pageVotes.forEach(vote => {
            const tr = document.createElement('tr');
            const sexoClass = vote.sexo === 'M' ? 'sexo-masculino' : vote.sexo === 'F' ? 'sexo-femenino' : '';
            tr.innerHTML = `
                <td>
                    <input type="checkbox" class="row-checkbox" data-vote-id="${vote.id}" ${this.selectedVotes.includes(vote.id) ? 'checked' : ''}>
                </td>
                <td>${vote.name || 'N/A'}</td>
                <td>${vote.cedula || 'N/A'}</td>
                <td>${vote.telefono || ''}</td>
                <td class="${sexoClass}">${vote.sexo === 'M' ? 'Masculino' : vote.sexo === 'F' ? 'Femenino' : 'N/A'}</td>
                <td>${vote.edad || 'N/A'}</td>
                <td>${vote.ubch || 'N/A'}</td>
                <td>${vote.community || 'N/A'}</td>
                <td>
                    <span class="vote-status ${vote.voted ? 'voted' : 'not-voted'}">
                        ${vote.voted ? 'S√≠' : 'No'}
                    </span>
                </td>
                <td>
                    <button class="btn btn-primary btn-small" onclick="votingSystem.showDetailView('${vote.id}')" title="Ver detalles">
                        üëÅÔ∏è
                    </button>
                    <button class="btn btn-primary btn-small" onclick="votingSystem.editVote('${vote.id}')" title="Editar">
                        üîÑ
                    </button>
                    <button class="btn btn-danger btn-small" onclick="votingSystem.deleteVote('${vote.id}')" title="Eliminar">
                        ‚ùå
                    </button>
                </td>
            `;
            fragment.appendChild(tr);
        });

        // Usar requestAnimationFrame para optimizar el renderizado
        requestAnimationFrame(() => {
            // Limpiar tbody y agregar fragmento de una vez
            tbody.innerHTML = '';
            tbody.appendChild(fragment);

            // Configurar eventos de checkbox usando delegaci√≥n de eventos
            tbody.addEventListener('change', (e) => {
                if (e.target.classList.contains('row-checkbox')) {
                    const voteId = e.target.dataset.voteId;
                    this.toggleVoteSelection(voteId, e.target.checked);
                }
            });
        
                                console.log(`‚úÖ Tabla renderizada con ${pageVotes.length} votos de la p√°gina ${this.currentPage}`);
        });
    }

    // Poblar el selector de filtro por UBCH
    populateUBCHFilter() {
        const ubchSelect = document.getElementById('ubch-filter-select');
        if (!ubchSelect) {
            console.warn('‚ö†Ô∏è No se encontr√≥ el selector ubch-filter-select');
            return;
        }
        // Obtener todos los Centros de Votaci√≥n posibles del mapa
        const allCVs = Object.keys(this.ubchToCommunityMap || {}).sort();
        console.log(`üîÑ Poblando filtro CV con ${allCVs.length} centros posibles:`, allCVs);
        // Limpiar opciones existentes
        ubchSelect.innerHTML = '<option value="">Todos los CV</option>';
        // Agregar opciones para cada CV
        allCVs.forEach(cv => {
            const option = document.createElement('option');
            option.value = cv;
            option.textContent = cv;
            ubchSelect.appendChild(option);
        });
        console.log(`‚úÖ Filtro CV poblado con ${ubchSelect.options.length} opciones`);
        // Verificar que el evento change est√© funcionando
        if (!ubchSelect.hasAttribute('data-event-bound')) {
            ubchSelect.setAttribute('data-event-bound', 'true');
            ubchSelect.addEventListener('change', (e) => {
                console.log(`üîÑ Filtro CV cambiado a: "${e.target.value}"`);
                this.applyFilters();
            });
        }
    }
    
    // Poblar el selector de filtro por Comunidad
    populateCommunityFilter() {
        const communitySelect = document.getElementById('community-filter-select');
        if (!communitySelect) {
            console.warn('‚ö†Ô∏è No se encontr√≥ el selector community-filter-select');
            return;
        }

        // Obtener todas las comunidades posibles del mapa
        const todasLasComunidades = new Set();
        Object.values(this.ubchToCommunityMap).forEach(comunidades => {
            comunidades.forEach(comunidad => todasLasComunidades.add(comunidad));
        });
        const comunidadesArray = Array.from(todasLasComunidades).sort();
        console.log(`üîÑ Poblando filtro Comunidad con ${comunidadesArray.length} comunidades posibles:`, comunidadesArray);
        
        // Limpiar opciones existentes
        communitySelect.innerHTML = '<option value="">Todas las Comunidades</option>';
        
        // Agregar opciones para cada comunidad
        comunidadesArray.forEach(community => {
            const option = document.createElement('option');
            option.value = community;
            option.textContent = community;
            communitySelect.appendChild(option);
        });
        
        console.log(`‚úÖ Filtro Comunidad poblado con ${communitySelect.options.length} opciones`);
        
        // Verificar que el evento change est√© funcionando
        if (!communitySelect.hasAttribute('data-event-bound')) {
            communitySelect.setAttribute('data-event-bound', 'true');
            communitySelect.addEventListener('change', (e) => {
                console.log(`üîÑ Filtro Comunidad cambiado a: "${e.target.value}"`);
                this.applyFilters();
            });
        }
    }

    // Actualizar todos los contadores
    updateAllCounters() {
        const totalVotes = this.votes.length;
        const votedVotes = this.votes.filter(v => v.voted).length;
        const notVotedVotes = this.votes.filter(v => !v.voted).length;
        
        // Contadores generales
        this.updateCounter('total-counter', totalVotes);
        this.updateCounter('voted-counter', votedVotes);
        this.updateCounter('not-voted-counter', notVotedVotes);
        
        // Contadores en botones de filtro
        this.updateCounter('all-count', totalVotes);
        this.updateCounter('voted-count', votedVotes);
        this.updateCounter('not-voted-count', notVotedVotes);
        
        // Contador de registros mostrados (se actualiza en renderFilteredVotesTable)
    }
    
    // Actualizar contador espec√≠fico
    updateCounter(elementId, count) {
        const element = document.getElementById(elementId);
        if (element) {
            requestAnimationFrame(() => {
                element.textContent = count.toLocaleString();
            });
        }
    }
    
    // Actualizar informaci√≥n de filtros aplicados
    updateFilterInfo() {
        const filterInfo = document.getElementById('filter-info');
        const activeFilterBtn = document.querySelector('.filter-btn.active');
        const selectedUBCH = document.getElementById('ubch-filter-select')?.value;
        const selectedCommunity = document.getElementById('community-filter-select')?.value;
        const selectedAgeRange = document.getElementById('age-filter-select')?.value;
        
        if (filterInfo) {
            const appliedFilters = [];
            
            if (activeFilterBtn && activeFilterBtn.dataset.filter !== 'all') {
                appliedFilters.push(activeFilterBtn.dataset.filter === 'voted' ? 'Votaron' : 'No votaron');
            }
            if (selectedUBCH) appliedFilters.push(`CV: ${selectedUBCH}`);
            if (selectedCommunity) appliedFilters.push(`Comunidad: ${selectedCommunity}`);
            if (selectedAgeRange) appliedFilters.push(`Edad: ${selectedAgeRange}`);
            
            if (appliedFilters.length > 0) {
                filterInfo.style.display = 'flex';
                filterInfo.querySelector('.filter-info-text').textContent = `Filtros: ${appliedFilters.join(', ')}`;
            } else {
                filterInfo.style.display = 'none';
            }
        }
    }
    
    // Actualizar contador de filtros optimizado (mantener para compatibilidad)
    updateFilterCounter(count) {
        // Este m√©todo ya no se usa, pero se mantiene para compatibilidad
        console.log(`Contador de filtros: ${count}`);
    }

    // Manejar cambio de filtro
    handleFilterChange(filter) {
        // Remover clase active de todos los botones
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // Agregar clase active al bot√≥n seleccionado
        const targetBtn = document.querySelector(`[data-filter="${filter}"]`);
        if (targetBtn) {
            targetBtn.classList.add('active');
        }
        
        // Aplicar filtros y re-renderizar la tabla
        this.applyFilters();
    }

    // Aplicar filtros (para el selector de UBCH y Comunidad)
    applyFilters() {
        console.log('üîÑ Aplicando filtros...');
        
        // Obtener filtros activos
        const activeFilterBtn = document.querySelector('.filter-btn.active');
        const selectedUBCH = document.getElementById('ubch-filter-select')?.value;
        const selectedCommunity = document.getElementById('community-filter-select')?.value;
        const selectedAgeRange = document.getElementById('age-filter-select')?.value;
        
        console.log('   - Filtro de estado:', activeFilterBtn?.dataset.filter || 'ninguno');
        console.log('   - Filtro UBCH:', selectedUBCH || 'todas');
        console.log('   - Filtro Comunidad:', selectedCommunity || 'todas');
        console.log('   - Filtro Edad:', selectedAgeRange || 'todas');
        
        // Aplicar filtros
        let filteredVotes = this.votes;
        
        // Filtrar por estado de voto
        if (activeFilterBtn) {
            const filter = activeFilterBtn.dataset.filter;
            if (filter === 'voted') {
                filteredVotes = filteredVotes.filter(v => v.voted);
                console.log(`   - Filtrando por votados: ${filteredVotes.length} votos`);
            } else if (filter === 'not-voted') {
                filteredVotes = filteredVotes.filter(v => !v.voted);
                console.log(`   - Filtrando por no votados: ${filteredVotes.length} votos`);
            }
        }
        
        // Filtrar por UBCH
        if (selectedUBCH) {
            const beforeCount = filteredVotes.length;
            filteredVotes = filteredVotes.filter(v => v.ubch === selectedUBCH);
            console.log(`   - Filtrando por UBCH "${selectedUBCH}": ${beforeCount} ‚Üí ${filteredVotes.length} votos`);
        }
        
        // Filtrar por Comunidad
        if (selectedCommunity) {
            const beforeCount = filteredVotes.length;
            filteredVotes = filteredVotes.filter(v => v.community === selectedCommunity);
            console.log(`   - Filtrando por Comunidad "${selectedCommunity}": ${beforeCount} ‚Üí ${filteredVotes.length} votos`);
        }

        // Filtrar por rango de edad
        if (selectedAgeRange) {
            const beforeCount = filteredVotes.length;
            filteredVotes = filteredVotes.filter(v => {
                const edad = v.edad || 0;
                switch (selectedAgeRange) {
                    case '16-25': return edad >= 16 && edad <= 25;
                    case '26-35': return edad >= 26 && edad <= 35;
                    case '36-45': return edad >= 36 && edad <= 45;
                    case '46-55': return edad >= 46 && edad <= 55;
                    case '56+': return edad >= 56;
                    default: return true;
                }
            });
            console.log(`   - Filtrando por edad "${selectedAgeRange}": ${beforeCount} ‚Üí ${filteredVotes.length} votos`);
        }
        
        console.log(`‚úÖ Filtros aplicados: ${filteredVotes.length} votos mostrados de ${this.votes.length} total`);
        
        // Aplicar b√∫squeda si hay t√©rmino de b√∫squeda
        if (this.currentSearchTerm) {
            filteredVotes = this.applySearch(filteredVotes, this.currentSearchTerm);
        }
        
        // Aplicar ordenamiento si hay orden activo
        if (this.currentSortField) {
            filteredVotes = this.applySort(filteredVotes, this.currentSortField, this.currentSortDirection);
        }
        
        // Guardar votos filtrados para paginaci√≥n
        this.filteredVotes = filteredVotes;
        this.currentPage = 1; // Resetear a la primera p√°gina cuando se aplican filtros
        
        // Actualizar informaci√≥n de filtros aplicados
        this.updateFilterInfo();
        
        // Renderizar tabla con votos filtrados
        this.renderFilteredVotesTable(filteredVotes);
        
        // Actualizar paginaci√≥n
        this.updatePagination();
    }

    // B√∫squeda
    handleSearch(searchTerm) {
        this.currentSearchTerm = searchTerm;
        this.applyFilters();
    }

    applySearch(votes, searchTerm) {
        if (!searchTerm.trim()) return votes;
        
        const searchField = document.getElementById('search-field')?.value || 'all';
        const term = searchTerm.toLowerCase();
        
        return votes.filter(vote => {
            if (searchField === 'all') {
                return (
                    (vote.name || '').toLowerCase().includes(term) ||
                    (vote.cedula || '').toLowerCase().includes(term) ||
                    (vote.community || '').toLowerCase().includes(term) ||
                    (vote.ubch || '').toLowerCase().includes(term)
                );
            } else {
                const fieldValue = vote[searchField] || '';
                return fieldValue.toString().toLowerCase().includes(term);
            }
        });
    }

    // Ordenamiento
    handleSort(sortField) {
        const header = document.querySelector(`[data-sort="${sortField}"]`);
        if (!header) {
            console.warn(`‚ö†Ô∏è No se encontr√≥ el header para ordenar: ${sortField}`);
            return;
        }
        
        // Limpiar ordenamiento previo
        document.querySelectorAll('.sortable-header').forEach(h => {
            h.classList.remove('sort-asc', 'sort-desc');
        });
        
        // Cambiar direcci√≥n de ordenamiento
        if (this.currentSortField === sortField) {
            this.currentSortDirection = this.currentSortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            this.currentSortField = sortField;
            this.currentSortDirection = 'asc';
        }
        
        // Aplicar clase visual
        header.classList.add(this.currentSortDirection === 'asc' ? 'sort-asc' : 'sort-desc');
        
        // Aplicar filtros (que incluyen ordenamiento)
        this.applyFilters();
    }

    applySort(votes, sortField, direction) {
        return votes.sort((a, b) => {
            let aValue = a[sortField];
            let bValue = b[sortField];
            
            // Manejar valores nulos
            if (aValue === null || aValue === undefined) aValue = '';
            if (bValue === null || bValue === undefined) bValue = '';
            
            // Convertir a string para comparaci√≥n
            aValue = aValue.toString().toLowerCase();
            bValue = bValue.toString().toLowerCase();
            
            if (direction === 'asc') {
                return aValue.localeCompare(bValue);
            } else {
                return bValue.localeCompare(aValue);
            }
        });
    }

    // Paginaci√≥n
    setupPaginationEventListeners() {
        document.getElementById('first-page')?.addEventListener('click', () => this.goToPage(1));
        document.getElementById('prev-page')?.addEventListener('click', () => this.goToPage(this.currentPage - 1));
        document.getElementById('next-page')?.addEventListener('click', () => this.goToPage(this.currentPage + 1));
        document.getElementById('last-page')?.addEventListener('click', () => this.goToPage(this.getTotalPages()));
    }

    goToPage(page) {
        const totalPages = this.getTotalPages();
        if (page < 1 || page > totalPages) return;
        
        this.currentPage = page;
        this.renderFilteredVotesTable(this.filteredVotes);
        this.updatePagination();
    }

    getTotalPages() {
        return Math.ceil(this.filteredVotes.length / this.pageSize);
    }

    updatePagination() {
        const totalPages = this.getTotalPages();
        const startIndex = (this.currentPage - 1) * this.pageSize;
        const endIndex = Math.min(startIndex + this.pageSize, this.filteredVotes.length);
        
        console.log(`üìÑ Actualizando paginaci√≥n: p√°gina ${this.currentPage} de ${totalPages}, registros ${startIndex + 1}-${endIndex} de ${this.filteredVotes.length}`);
        
        // Actualizar informaci√≥n de paginaci√≥n
        const startElement = document.getElementById('pagination-start');
        const endElement = document.getElementById('pagination-end');
        const totalElement = document.getElementById('pagination-total');
        
        if (startElement) startElement.textContent = this.filteredVotes.length > 0 ? startIndex + 1 : 0;
        if (endElement) endElement.textContent = endIndex;
        if (totalElement) totalElement.textContent = this.filteredVotes.length;
        
        // Actualizar botones de navegaci√≥n
        const firstBtn = document.getElementById('first-page');
        const prevBtn = document.getElementById('prev-page');
        const nextBtn = document.getElementById('next-page');
        const lastBtn = document.getElementById('last-page');
        
        if (firstBtn) firstBtn.disabled = this.currentPage <= 1;
        if (prevBtn) prevBtn.disabled = this.currentPage <= 1;
        if (nextBtn) nextBtn.disabled = this.currentPage >= totalPages;
        if (lastBtn) lastBtn.disabled = this.currentPage >= totalPages;
        
        // Generar n√∫meros de p√°gina
        this.generatePageNumbers(totalPages);
    }

    generatePageNumbers(totalPages) {
        const container = document.getElementById('page-numbers');
        container.innerHTML = '';
        
        const maxVisiblePages = 5;
        let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
        
        if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }
        
        for (let i = startPage; i <= endPage; i++) {
            const btn = document.createElement('button');
            btn.className = `pagination-btn ${i === this.currentPage ? 'active' : ''}`;
            btn.textContent = i;
            btn.addEventListener('click', () => this.goToPage(i));
            container.appendChild(btn);
        }
    }

    // Selecci√≥n masiva
    toggleSelectAll(checked) {
        const checkboxes = document.querySelectorAll('.row-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = checked;
            const voteId = checkbox.dataset.voteId;
            this.toggleVoteSelection(voteId, checked);
        });
        
        this.updateBulkActionsVisibility();
    }

    toggleVoteSelection(voteId, selected) {
        if (selected) {
            if (!this.selectedVotes.includes(voteId)) {
                this.selectedVotes.push(voteId);
            }
        } else {
            this.selectedVotes = this.selectedVotes.filter(id => id !== voteId);
        }
        
        this.updateBulkActionsVisibility();
        this.updateSelectAllCheckbox();
    }

    updateBulkActionsVisibility() {
        const bulkActions = document.getElementById('bulk-actions');
        if (bulkActions) {
            if (this.selectedVotes.length > 0) {
                bulkActions.classList.add('show');
            } else {
                bulkActions.classList.remove('show');
            }
        }
    }

    updateSelectAllCheckbox() {
        const checkboxes = document.querySelectorAll('.row-checkbox');
        const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;
        const totalCount = checkboxes.length;
        
        const selectAllCheckbox = document.getElementById('select-all-checkbox');
        const headerCheckbox = document.getElementById('header-checkbox');
        
        if (checkedCount === 0) {
            selectAllCheckbox.checked = false;
            headerCheckbox.checked = false;
        } else if (checkedCount === totalCount) {
            selectAllCheckbox.checked = true;
            headerCheckbox.checked = true;
        } else {
            selectAllCheckbox.checked = false;
            headerCheckbox.checked = false;
        }
    }

    // Acciones masivas
    async bulkConfirmVotes() {
        if (this.selectedVotes.length === 0) return;
        
        const confirmed = confirm(`¬øConfirmar votos para ${this.selectedVotes.length} registros seleccionados?`);
        if (!confirmed) return;
        
        this.showLoadingState('list', true);
        
        try {
            for (const voteId of this.selectedVotes) {
                await this.confirmVote(voteId);
            }
            
            this.selectedVotes = [];
            this.updateBulkActionsVisibility();
            this.applyFilters();
            
            // Enviar notificaci√≥n
            if (window.realtimeNotifications) {
                window.realtimeNotifications.sendNotification(
                    `Se confirmaron ${this.selectedVotes.length} votos masivamente`,
                    'success',
                    'global'
                );
            }
            
        } catch (error) {
            console.error('Error en confirmaci√≥n masiva:', error);
            this.showMessage('Error al confirmar votos masivamente', 'error', 'list');
        } finally {
            this.showLoadingState('list', false);
        }
    }

    async bulkDeleteVotes() {
        if (this.selectedVotes.length === 0) return;
        
        const confirmed = confirm(`¬øEliminar ${this.selectedVotes.length} registros seleccionados? Esta acci√≥n no se puede deshacer.`);
        if (!confirmed) return;
        
        this.showLoadingState('list', true);
        
        try {
            for (const voteId of this.selectedVotes) {
                await this.deleteVoteFromFirebase(voteId);
            }
            
            this.selectedVotes = [];
            this.updateBulkActionsVisibility();
            this.applyFilters();
            
            // Enviar notificaci√≥n
            if (window.realtimeNotifications) {
                window.realtimeNotifications.sendNotification(
                    `Se eliminaron ${this.selectedVotes.length} registros masivamente`,
                    'info',
                    'global'
                );
            }
            
        } catch (error) {
            console.error('Error en eliminaci√≥n masiva:', error);
            this.showMessage('Error al eliminar registros masivamente', 'error', 'list');
        } finally {
            this.showLoadingState('list', false);
        }
    }

    // M√©todo eliminado - funcionalidad integrada en exportToCSVSmart()
    // bulkExportSelected() {
    //     if (this.selectedVotes.length === 0) return;
    //     
    //     const selectedVotesData = this.votes.filter(vote => this.selectedVotes.includes(vote.id));
    //     this.exportVotesToCSV(selectedVotesData, 'votos_seleccionados');
    // }

    // Vista detallada
    showDetailView(voteId) {
        const vote = this.votes.find(v => v.id === voteId);
        if (!vote) return;
        
        this.currentDetailVote = vote;
        
        // Llenar informaci√≥n detallada de manera segura
        const detailElements = {
            'detail-name': vote.name || 'N/A',
            'detail-cedula': vote.cedula || 'N/A',
            'detail-telefono': vote.telefono || 'N/A',
            'detail-sexo': vote.sexo === 'M' ? 'Masculino' : vote.sexo === 'F' ? 'Femenino' : 'N/A',
            'detail-edad': vote.edad || 'N/A',
            'detail-ubch': vote.ubch || 'N/A',
            'detail-community': vote.community || 'N/A',
            'detail-vote-status': vote.voted ? 'S√≠' : 'No',
            'detail-registered-at': vote.registeredAt ? new Date(vote.registeredAt).toLocaleString() : 'N/A',
            'detail-registered-by': vote.registeredBy || 'N/A'
        };
        
        // Actualizar elementos de manera segura
        Object.entries(detailElements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = value;
            }
        });
        
        // Mostrar vista detallada
        const detailView = document.getElementById('detail-view');
        if (detailView) {
            detailView.classList.add('show');
        }
    }

    closeDetailView() {
        const detailView = document.getElementById('detail-view');
        if (detailView) {
            detailView.classList.remove('show');
        }
        this.currentDetailVote = null;
    }

    editFromDetail() {
        if (this.currentDetailVote) {
            this.editVote(this.currentDetailVote.id);
            this.closeDetailView();
        }
    }

    confirmFromDetail() {
        if (this.currentDetailVote) {
            this.confirmVote(this.currentDetailVote.id);
            this.closeDetailView();
        }
    }

    deleteFromDetail() {
        if (this.currentDetailVote) {
            this.deleteVote(this.currentDetailVote.id);
            this.closeDetailView();
        }
    }

    // Estados de carga
    showLoadingState(page, loading) {
        const loadingOverlay = document.getElementById('table-loading');
        if (loadingOverlay) {
            loadingOverlay.style.display = loading ? 'flex' : 'none';
        }
    }

    // M√©todo de debug para verificar el estado del sistema
    debugListPage() {
        console.log('üîç === DEBUG LIST PAGE ===');
        console.log('üìä Votos totales:', this.votes.length);
        console.log('üìã Votos filtrados:', this.filteredVotes.length);
        console.log('üìÑ P√°gina actual:', this.currentPage);
        console.log('üìè Tama√±o de p√°gina:', this.pageSize);
        console.log('‚úÖ Elementos seleccionados:', this.selectedVotes.length);
        console.log('üîç T√©rmino de b√∫squeda:', this.currentSearchTerm);
        console.log('üìä Campo de ordenamiento:', this.currentSortField);
        console.log('üìà Direcci√≥n de ordenamiento:', this.currentSortDirection);
        
        // Verificar elementos del DOM
        const table = document.getElementById('registros-table');
        const tbody = table?.querySelector('tbody');
        const paginationContainer = document.getElementById('pagination-container');
        
        console.log('üìã Tabla encontrada:', !!table);
        console.log('üìã Tbody encontrado:', !!tbody);
        console.log('üìã Contenedor de paginaci√≥n:', !!paginationContainer);
        
        if (tbody) {
            console.log('üìã Filas en tbody:', tbody.children.length);
        }
        
        console.log('üîç === FIN DEBUG ===');
    }

    deleteVote(voteId) {
        this.voteToDelete = voteId;
        document.getElementById('delete-modal').style.display = 'flex';
    }

    editVote(voteId) {
        // Encontrar el registro a editar
        const vote = this.votes.find(v => v.id === voteId);
        if (!vote) {
            this.showMessage('Registro no encontrado', 'error', 'listado');
            return;
        }

        // Guardar el ID del registro que se est√° editando
        this.voteToEdit = voteId;

        // Llenar el formulario con los datos actuales
        this.populateEditForm(vote);

        // Mostrar el modal de edici√≥n
        document.getElementById('edit-modal').style.display = 'flex';
    }

    populateEditForm(vote) {
        // Llenar los campos del formulario
        document.getElementById('edit-name').value = vote.name || '';
        document.getElementById('edit-cedula').value = vote.cedula || '';
        document.getElementById('edit-telefono').value = vote.telefono || '';
        document.getElementById('edit-sexo').value = vote.sexo || '';
        document.getElementById('edit-edad').value = vote.edad || '';

        // Configurar CV y comunidad
        this.populateEditUBCH(vote.ubch, vote.community);
    }

    populateEditUBCH(selectedUBCH, selectedCommunity) {
        const ubchSelect = document.getElementById('edit-ubch');
        const communitySelect = document.getElementById('edit-community');

        // Limpiar opciones existentes
        ubchSelect.innerHTML = '<option value="">Selecciona un CV</option>';
        communitySelect.innerHTML = '<option value="">Selecciona una comunidad</option>';

        // Agregar opciones de UBCH
        Object.keys(this.ubchToCommunityMap).forEach(ubch => {
            const option = document.createElement('option');
            option.value = ubch;
            option.textContent = ubch;
            if (ubch === selectedUBCH) {
                option.selected = true;
            }
            ubchSelect.appendChild(option);
        });

        // Configurar comunidades si hay UBCH seleccionada
        if (selectedUBCH && this.ubchToCommunityMap[selectedUBCH]) {
            communitySelect.disabled = false;
            this.ubchToCommunityMap[selectedUBCH].forEach(community => {
                const option = document.createElement('option');
                option.value = community;
                option.textContent = community;
                if (community === selectedCommunity) {
                    option.selected = true;
                }
                communitySelect.appendChild(option);
            });
        } else {
            communitySelect.disabled = true;
        }
    }

    closeEditModal() {
        document.getElementById('edit-modal').style.display = 'none';
        this.voteToEdit = null;
        
        // Limpiar el formulario
        document.getElementById('edit-form').reset();
    }

    async handleEditSubmit(event) {
        event.preventDefault();

        if (!this.voteToEdit) {
            this.showMessage('Error: No hay registro seleccionado para editar', 'error', 'listado');
            return;
        }
        // Bloquear edici√≥n de registros locales
        if (this.voteToEdit.startsWith('local_')) {
            this.showMessage('Este registro a√∫n no ha sido sincronizado. Por favor, espera a que se sincronice para poder editarlo.', 'warning', 'listado');
            return;
        }
        // Obtener los datos del formulario
        const formData = new FormData(event.target);
        const editData = {
            name: formData.get('name'),
            cedula: formData.get('cedula'),
            telefono: formData.get('telefono'),
            sexo: formData.get('sexo'),
            edad: parseInt(formData.get('edad')),
            ubch: formData.get('ubch'),
            community: formData.get('community')
        };

        // Validar los datos
        const validation = this.validateRegistrationData(editData);
        if (!validation.isValid) {
            this.showMessage(validation.message, 'error', 'listado');
            return;
        }

        try {
            // Actualizar en Firebase
            await this.updateVoteInFirebase(this.voteToEdit, editData);
            // Recargar datos desde Firebase para reflejar el cambio
            await this.loadDataFromFirebase();
            // Cerrar el modal
            this.closeEditModal();
            // Mostrar mensaje de √©xito
            this.showMessage('Registro actualizado correctamente', 'success', 'listado');
        } catch (error) {
            console.error('Error al actualizar registro:', error);
            this.showMessage('Error al actualizar el registro: ' + error.message, 'error', 'listado');
        }
    }

    closeDeleteModal() {
        document.getElementById('delete-modal').style.display = 'none';
        this.voteToDelete = null;
    }

    renderDashboardPage() {
        const totalRegistered = this.votes.length;
        const totalVoted = this.votes.filter(vote => vote.voted).length;
        const percentage = totalRegistered > 0 ? (totalVoted / totalRegistered) * 100 : 0;

        document.getElementById('total-registered').textContent = totalRegistered;
        document.getElementById('total-voted').textContent = totalVoted;
        document.getElementById('vote-progress').style.width = `${percentage}%`;
        document.getElementById('vote-progress').textContent = '';
        document.getElementById('progress-percentage').textContent = `${percentage.toFixed(1)}%`;
        document.getElementById('progress-text').textContent = `${totalVoted} de ${totalRegistered} personas han votado.`;
    }

    renderStatisticsPage() {
        const votedVotes = this.votes.filter(vote => vote.voted);
        
        // Estad√≠sticas por CV
        const ubchStats = {};
        votedVotes.forEach(vote => {
            ubchStats[vote.ubch] = (ubchStats[vote.ubch] || 0) + 1;
        });

        // Estad√≠sticas por Comunidad
        const communityStats = {};
        votedVotes.forEach(vote => {
            communityStats[vote.community] = (communityStats[vote.community] || 0) + 1;
        });

        // Estad√≠sticas por Sexo
        const sexoStats = {};
        votedVotes.forEach(vote => {
            const sexo = vote.sexo === 'M' ? 'Masculino' : vote.sexo === 'F' ? 'Femenino' : 'No especificado';
            sexoStats[sexo] = (sexoStats[sexo] || 0) + 1;
        });

        // Estad√≠sticas por Rango de Edad
        const edadStats = {};
        votedVotes.forEach(vote => {
            const edad = vote.edad || 0;
            let rango = 'No especificado';
            
            if (edad >= 16 && edad <= 25) rango = '16-25 a√±os';
            else if (edad >= 26 && edad <= 35) rango = '26-35 a√±os';
            else if (edad >= 36 && edad <= 45) rango = '36-45 a√±os';
            else if (edad >= 46 && edad <= 55) rango = '46-55 a√±os';
            else if (edad >= 56 && edad <= 65) rango = '56-65 a√±os';
            else if (edad >= 66) rango = '66+ a√±os';
            
            edadStats[rango] = (edadStats[rango] || 0) + 1;
        });

        this.renderStatsList('ubch-stats', ubchStats, 'ubch');
        this.renderStatsList('community-stats', communityStats, 'community');
        this.renderStatsList('sexo-stats', sexoStats, 'sexo');
        this.renderStatsList('edad-stats', edadStats, 'edad');

        // --- NUEVO: Renderizar tarjetas de todas las CV abajo ---
        const statsProjectionList = document.getElementById('stats-projection-list');
        if (statsProjectionList) {
            // Obtener todos los CV posibles (ordenados)
            const allCVs = Object.keys(this.ubchToCommunityMap || {}).sort();
            // Contar votos y registrados por CV
            const votosPorCV = {};
            const registradosPorCV = {};
            allCVs.forEach(cv => { votosPorCV[cv] = 0; registradosPorCV[cv] = 0; });
            this.votes.forEach(v => {
                if (v.ubch && registradosPorCV.hasOwnProperty(v.ubch)) {
                    registradosPorCV[v.ubch]++;
                    if (v.voted) votosPorCV[v.ubch]++;
                }
            });
            // Renderizar tarjetas
            statsProjectionList.innerHTML = allCVs.map((cv, i) => {
                const votos = votosPorCV[cv];
                const registrados = registradosPorCV[cv];
                const porcentajeCV = registrados ? ((votos / registrados) * 100).toFixed(1) : 0;
                return `
                <div class='projection-item' style="background:#232946; border-radius:1rem; padding:0.3rem 0.5rem; margin-bottom:0.7rem; box-shadow:0 2px 8px rgba(80,112,255,0.08);">
                    <div class='projection-item-header' style="display:flex; justify-content:space-between; align-items:center; margin-bottom:0.3rem;">
                        <span class='projection-item-name' style="font-size:1em; font-weight:600; color:#fff;">${i+1}. ${cv}</span>
                        <span class='projection-item-count' style="font-size:1.1em; font-weight:700; color:#43e97b;">${votos}</span>
                    </div>
                    <div style="font-size:0.93em; color:#bfc9d1; margin-bottom:0.2em;">Registrados: ${registrados}</div>
                    <div class='projection-item-progress' style="width:100%; height:0.7rem; background:#374151; border-radius:0.5rem; overflow:hidden; margin-bottom:0.1em;">
                        <div class='projection-item-progress-fill' style="height:100%; background:linear-gradient(90deg,#10b981,#34d399); width:${porcentajeCV}%; transition:width 0.5s; border-radius:0.5rem;"></div>
                    </div>
                    <div style="font-size:0.85em; color:#43e97b;">${porcentajeCV}% participaci√≥n</div>
                </div>
                `;
            }).join('');
        }
    }

    renderStatsList(containerId, stats, type) {
        const container = document.getElementById(containerId);
        container.innerHTML = '';

        const sortedStats = Object.entries(stats).sort(([,a], [,b]) => b - a);

        sortedStats.forEach(([name, count]) => {
            const div = document.createElement('div');
            div.className = `stats-item ${type}`;
            div.innerHTML = `
                <span>${name}</span>
                <span>${count}</span>
            `;
            container.appendChild(div);
        });
    }

    async generateThankYouMessage(name, ubch, community) {
        const messageDiv = document.getElementById('thank-you-message');
        messageDiv.innerHTML = '<p>Generando mensaje...</p>';
        messageDiv.style.display = 'block';

        try {
            const messages = [
                            `¬°Excelente ${name}! Tu registro en el Centro de Votaci√≥n "${ubch}" y comunidad "${community}" es un paso importante para fortalecer nuestra democracia. Tu participaci√≥n cuenta.`,
            `${name}, gracias por registrarte en "${ubch}". Tu compromiso con la comunidad "${community}" es fundamental para el futuro de nuestro pa√≠s.`,
                `¬°Bienvenido ${name}! Tu registro en "${ubch}" demuestra tu compromiso con la participaci√≥n ciudadana. Juntos construimos un mejor futuro.`
            ];
            
            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
            
            messageDiv.innerHTML = `
                <p><strong>Mensaje para la persona registrada:</strong></p>
                <p>${randomMessage}</p>
            `;
        } catch (error) {
            messageDiv.innerHTML = `
                <p><strong>Mensaje para la persona registrada:</strong></p>
                <p>¬°Gracias por tu registro! Tu participaci√≥n es muy valiosa.</p>
            `;
        }
    }

    setLoadingState(page, loading) {
        const form = document.getElementById(`${page}-form`);
        const submitBtn = form.querySelector('button[type="submit"]');
        const btnText = submitBtn.querySelector('.btn-text');
        const btnLoading = submitBtn.querySelector('.btn-loading');

        if (loading) {
            btnText.style.display = 'none';
            btnLoading.style.display = 'inline';
            submitBtn.disabled = true;
        } else {
            btnText.style.display = 'inline';
            btnLoading.style.display = 'none';
            submitBtn.disabled = false;
        }
    }

    showMessage(message, type, page) {
        const messageDiv = document.getElementById(`${page}-message`);
        if (!messageDiv) return; // Evitar error si el elemento no existe
        messageDiv.textContent = message;
        messageDiv.className = `message ${type}`;
        messageDiv.style.display = 'block';

        setTimeout(() => {
            messageDiv.style.display = 'none';
        }, 5000);
    }

    loadPdfLibraries() {
        if (window.jspdf) {
            this.pdfLibrariesReady = true;
            return;
        }

        const checkLibraries = () => {
            if (window.jspdf) {
                this.pdfLibrariesReady = true;
            } else {
                setTimeout(checkLibraries, 100);
            }
        };
        checkLibraries();
    }

    // Obtener votos filtrados seg√∫n los filtros activos
    getFilteredVotes() {
        let filteredVotes = this.votes;
        
        // Filtro por estado de voto
        const activeFilterBtn = document.querySelector('.filter-btn.active');
        if (activeFilterBtn) {
            const filter = activeFilterBtn.dataset.filter;
            if (filter === 'voted') {
                filteredVotes = filteredVotes.filter(v => v.voted);
            } else if (filter === 'not-voted') {
                filteredVotes = filteredVotes.filter(v => !v.voted);
            }
        }
        
        // Filtro por UBCH
        const selectedUBCH = document.getElementById('ubch-filter-select')?.value;
        if (selectedUBCH) {
            filteredVotes = filteredVotes.filter(v => v.ubch === selectedUBCH);
        }
        
        // Filtro por comunidad
        const selectedCommunity = document.getElementById('community-filter-select')?.value;
        if (selectedCommunity) {
            filteredVotes = filteredVotes.filter(v => v.community === selectedCommunity);
        }
        
        // Filtro por rango de edad
        const selectedAgeRange = document.getElementById('age-filter-select')?.value;
        if (selectedAgeRange) {
            filteredVotes = filteredVotes.filter(v => {
                const edad = v.edad || 0;
                switch (selectedAgeRange) {
                    case '16-25': return edad >= 16 && edad <= 25;
                    case '26-35': return edad >= 26 && edad <= 35;
                    case '36-45': return edad >= 36 && edad <= 45;
                    case '46-55': return edad >= 46 && edad <= 55;
                    case '56+': return edad >= 56;
                    default: return true;
                }
            });
        }
        
        // Aplicar b√∫squeda si hay t√©rmino de b√∫squeda
        if (this.currentSearchTerm) {
            filteredVotes = this.applySearch(filteredVotes, this.currentSearchTerm);
        }
        
        return filteredVotes;
    }
    
    // Obtener informaci√≥n de filtros aplicados
    getFilterInfo() {
        const activeFilterBtn = document.querySelector('.filter-btn.active');
        const selectedUBCH = document.getElementById('ubch-filter-select')?.value;
        const selectedCommunity = document.getElementById('community-filter-select')?.value;
        const selectedAgeRange = document.getElementById('age-filter-select')?.value;
        
        const filterInfo = {
            hasFilters: false,
            statusFilter: null,
            ubchFilter: null,
            communityFilter: null,
            ageFilter: null,
            searchTerm: this.currentSearchTerm || null
        };
        
        if (activeFilterBtn && activeFilterBtn.dataset.filter !== 'all') {
            filterInfo.statusFilter = activeFilterBtn.dataset.filter === 'voted' ? 'Votaron' : 'No votaron';
            filterInfo.hasFilters = true;
        }
        
        if (selectedUBCH) {
            filterInfo.ubchFilter = selectedUBCH;
            filterInfo.hasFilters = true;
        }
        
        if (selectedCommunity) {
            filterInfo.communityFilter = selectedCommunity;
            filterInfo.hasFilters = true;
        }
        
        if (selectedAgeRange) {
            filterInfo.ageFilter = selectedAgeRange;
            filterInfo.hasFilters = true;
        }
        
        if (this.currentSearchTerm) {
            filterInfo.hasFilters = true;
        }
        
        return filterInfo;
    }
    
    // Generar nombre de archivo con informaci√≥n de filtros
    generateFileName(extension, filterInfo) {
        let fileName = 'listado-personas';
        
        if (filterInfo.hasFilters) {
            const filters = [];
            if (filterInfo.statusFilter) filters.push(filterInfo.statusFilter);
            if (filterInfo.ubchFilter) filters.push(filterInfo.ubchFilter.replace(/[^a-zA-Z0-9]/g, '-'));
            if (filterInfo.communityFilter) filters.push(filterInfo.communityFilter.replace(/[^a-zA-Z0-9]/g, '-'));
            if (filterInfo.ageFilter) filters.push(filterInfo.ageFilter.replace(/[^a-zA-Z0-9]/g, '-'));
            if (filterInfo.searchTerm) filters.push('busqueda');
            
            fileName += `-filtrado-${filters.join('-')}`;
        }
        
        fileName += `-${new Date().toLocaleDateString('es-ES').replace(/\//g, '-')}`;
        fileName += `.${extension}`;
        
        return fileName;
    }

    exportToPDF() {
        if (!window.jspdf || !window.jspdf.jsPDF) {
            this.showMessage('Error: Librer√≠a PDF no disponible', 'error', 'listado');
            return;
        }

        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        // Obtener votos filtrados
        const filteredVotes = this.getFilteredVotes();
        const filterInfo = this.getFilterInfo();
        
        // T√≠tulo
        doc.setFontSize(18);
        doc.text('Listado de Personas Registradas', 20, 20);

        // Informaci√≥n de filtros aplicados
        if (filterInfo.hasFilters) {
            doc.setFontSize(10);
            doc.text('Filtros aplicados:', 20, 30);
            doc.setFontSize(8);
            let yPos = 35;
            if (filterInfo.statusFilter) {
                doc.text(`‚Ä¢ Estado: ${filterInfo.statusFilter}`, 25, yPos);
                yPos += 5;
            }
            if (filterInfo.ubchFilter) {
                doc.text(`‚Ä¢ CV: ${filterInfo.ubchFilter}`, 25, yPos);
                yPos += 5;
            }
            if (filterInfo.communityFilter) {
                doc.text(`‚Ä¢ Comunidad: ${filterInfo.communityFilter}`, 25, yPos);
                yPos += 5;
            }
            doc.text(`‚Ä¢ Total de registros: ${filteredVotes.length}`, 25, yPos);
            yPos += 10;
        } else {
            doc.setFontSize(10);
            doc.text(`Total de registros: ${filteredVotes.length}`, 20, 30);
        }

        // Fecha
        doc.setFontSize(10);
        doc.text(`Fecha: ${new Date().toLocaleDateString()} - ${new Date().toLocaleTimeString()}`, 20, filterInfo.hasFilters ? 55 : 40);

        // Datos de la tabla
        const tableData = filteredVotes.map(vote => [
            vote.name,
            vote.cedula,
            vote.telefono || '',
            vote.sexo === 'M' ? 'Masculino' : vote.sexo === 'F' ? 'Femenino' : 'N/A',
            vote.edad || 'N/A',
            vote.ubch,
            vote.community,
            vote.voted ? 'S√≠' : 'No'
        ]);

        doc.autoTable({
            head: [['Nombre', 'C√©dula', 'Tel√©fono', 'Sexo', 'Edad', 'CV', 'Comunidad', 'Vot√≥']],
            body: tableData,
            startY: filterInfo.hasFilters ? 65 : 50,
            styles: {
                fontSize: 8,
                cellPadding: 2
            },
            headStyles: {
                fillColor: [41, 128, 185],
                textColor: 255
            },
            alternateRowStyles: {
                fillColor: [245, 245, 245]
            }
        });

        // Generar nombre de archivo con filtros
        const fileName = this.generateFileName('pdf', filterInfo);
        
        // Guardar PDF
        doc.save(fileName);
        this.showMessage(`PDF generado: ${fileName}`, 'success', 'listado');
    }

    // M√©todo inteligente para exportar CSV
    exportToCSVSmart() {
        // Verificar si hay registros seleccionados
        if (this.selectedVotes.length > 0) {
            // Exportar solo los registros seleccionados
            const selectedVotesData = this.votes.filter(vote => this.selectedVotes.includes(vote.id));
            this.exportVotesToCSV(selectedVotesData, 'votos_seleccionados');
            this.showMessage(`CSV generado con ${selectedVotesData.length} registros seleccionados`, 'success', 'listado');
        } else {
            // Exportar todos los registros filtrados seg√∫n los filtros activos
            const filteredVotes = this.getFilteredVotes();
            const filterInfo = this.getFilterInfo();
            
            if (filteredVotes.length === 0) {
                this.showMessage('No hay registros para exportar con los filtros aplicados', 'warning', 'listado');
                return;
            }
            
            // Generar nombre de archivo con informaci√≥n de filtros
            const fileName = this.generateFileName('csv', filterInfo);
            this.exportVotesToCSV(filteredVotes, fileName.replace('.csv', ''));
            
            // Mostrar informaci√≥n detallada sobre los filtros aplicados
            let filterMessage = `CSV generado: ${fileName} con ${filteredVotes.length} registros`;
            if (filterInfo.hasFilters) {
                const appliedFilters = [];
                if (filterInfo.statusFilter) appliedFilters.push(filterInfo.statusFilter);
                if (filterInfo.ubchFilter) appliedFilters.push(`CV: ${filterInfo.ubchFilter}`);
                if (filterInfo.communityFilter) appliedFilters.push(`Comunidad: ${filterInfo.communityFilter}`);
                if (filterInfo.ageFilter) appliedFilters.push(`Edad: ${filterInfo.ageFilter}`);
                if (filterInfo.searchTerm) appliedFilters.push(`B√∫squeda: "${filterInfo.searchTerm}"`);
                
                filterMessage += `\nFiltros aplicados: ${appliedFilters.join(', ')}`;
            }
            
            this.showMessage(filterMessage, 'success', 'listado');
        }
    }

    // M√©todo para exportar registros espec√≠ficos a CSV
    exportVotesToCSV(votesData, fileName) {
        const headers = ['Nombre', 'C√©dula', 'Tel√©fono', 'Sexo', 'Edad', 'CV', 'Comunidad', 'Vot√≥'];
        const rows = votesData.map(vote => [
            `"${(vote.name || '').replace(/"/g, '""')}"`,
            `"${(vote.cedula || '').replace(/"/g, '""')}"`,
            `"${(vote.telefono || '').replace(/"/g, '""')}"`,
            `"${vote.sexo === 'M' ? 'Masculino' : vote.sexo === 'F' ? 'Femenino' : ''}"`,
            `"${vote.edad || ''}"`,
            `"${(vote.ubch || '').replace(/"/g, '""')}"`,
            `"${(vote.community || '').replace(/"/g, '""')}"`,
            `"${vote.voted ? 'S√≠' : 'No'}"`
        ]);
        
        let csvContent = headers.join(';') + '\r\n';
        rows.forEach(row => {
            csvContent += row.join(';') + '\r\n';
        });
        
        const BOM = '\uFEFF';
        const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.setAttribute('download', `${fileName}.csv`);
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    exportToCSV() {
        // Obtener votos filtrados
        const filteredVotes = this.getFilteredVotes();
        const filterInfo = this.getFilterInfo();
        
        const headers = ['Nombre', 'C√©dula', 'Tel√©fono', 'Sexo', 'Edad', 'CV', 'Comunidad', 'Vot√≥'];
        const rows = filteredVotes.map(vote => [
            `"${(vote.name || '').replace(/"/g, '""')}"`,
            `"${(vote.cedula || '').replace(/"/g, '""')}"`,
            `"${(vote.telefono || '').replace(/"/g, '""')}"`,
            `"${vote.sexo === 'M' ? 'Masculino' : vote.sexo === 'F' ? 'Femenino' : ''}"`,
            `"${vote.edad || ''}"`,
            `"${(vote.ubch || '').replace(/"/g, '""')}"`,
            `"${(vote.community || '').replace(/"/g, '""')}"`,
            `"${vote.voted ? 'S√≠' : 'No'}"`
        ]);
        
        let csvContent = headers.join(';') + '\r\n';
        rows.forEach(row => {
            csvContent += row.join(';') + '\r\n';
        });
        
        const BOM = '\uFEFF';
        const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        
        // Generar nombre de archivo con filtros
        const fileName = this.generateFileName('csv', filterInfo);
        link.setAttribute('download', fileName);
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        this.showMessage(`CSV generado: ${fileName}`, 'success', 'listado');
    }

    // Funci√≥n para forzar recarga de configuraci√≥n y actualizar Firebase
    async forzarRecargaConfiguracion() {
        console.log('üîÑ Forzando recarga y actualizaci√≥n de configuraci√≥n en Firebase...');
        // Configuraci√≥n local correcta
        const configCorrecta = {
            "COLEGIO ASUNCION BELTRAN": ["EL VALLE", "VILLA OASIS", "VILLAS DEL CENTRO 1ERA ETAPA", "VILLAS DEL CENTRO 3ERA ETAPA B", "VILLAS DEL CENTRO 3ERA ETAPA C", "VILLAS DEL CENTRO IV ETAPA", "LA CAMACHERA", "CONSOLACI√ìN"],
            "LICEO JOSE FELIX RIBAS": ["EL CUJINAL", "LAS MORAS", "VILLA ESPERANZA 200", "VILLAS DEL CENTRO 3ERA ETAPA A", "LOS PALOMARES", "EL LAGO", "CARABALI I Y II", "EL BANCO", "CARIAPRIMA I Y II", "CONSOLACI√ìN"],
            "ESCUELA PRIMARIA BOLIVARIANA LA PRADERA": ["EL SAMAN", "GUAYABAL E", "PALOS GRANDES II", "PALOS GRANDES I", "TIERRAS DEL SOL", "LA CASTELLANA", "GARDENIAS I", "GARDENIAS II", "EL CERCADITO", "ALTAMIRA", "LA ENSENADA", "BUCARES", "GUAYABAL", "APAMATE", "EL REFUGIO", "LOS ROBLES", "ARAGUANEY", "CONSOLACI√ìN"],
            "CASA COMUNAL JOSE TOMAS GALLARDO": ["JOSE TOMAS GALLARDO A", "JOSE TOMAS GALLARDO B", "ALI PRIMERA", "CONSOLACI√ìN"],
            "ESCUELA 5 DE JULIO": ["10 DE AGOSTO", "CAMPO ALEGRE I", "CAMPO ALEGRE II", "5 DE JULIO", "CONSOLACI√ìN"],
            "ESCUELA CECILIO ACOSTA": ["VOLUNTAD DE DIOS", "LAS MALVINAS", "BRISAS DEL LAGO", "MAISANTA", "INDIANA SUR", "LOS CASTORES", "CONSOLACI√ìN"],
            "ESCUELA BASICA FE Y ALEGRIA": ["FE Y ALEGRIA", "BARRIO SOLIDARIO", "COMUNIDAD FUTURO", "CONSOLACI√ìN"],
            "ESCUELA GRADUADA ANTONIO JOSE DE SUCRE": ["PALO NEGRO OESTE", "JESUS DE NAZARETH", "SECTOR BOLIVAR", "PALO NEGRO ESTE", "CONSOLACI√ìN"],
            "CASA COMUNAL": ["LOS JABILLOS", "CONSOLACI√ìN"],
            "UNIDAD EDUCATIVA MONSE√ëOR JOS√â JACINTO SOTO LAYA": ["PROLONGACION MIRANDA", "SANTA EDUVIGES II", "CONSOLACI√ìN"],
            "BASE DE MISIONES LUISA CACERES DE ARISMENDI": ["4 DE DICIEMBRE", "23 DE ENERO", "19 DE ABRIL", "EL EREIG√úE", "CONSOLACI√ìN"],
            "ESCUELA ESTADAL ALEJO ZULOAGA": ["MANUELITA SAENZ", "PANAMERICANO", "CONSOLACI√ìN"],
            "UNIDAD EDUCATIVA MONSE√ëOR MONTES DE OCA": ["REMATE", "CONSOLACI√ìN"],
            "ESCUELA BASICA NACIONAL CONCENTRADA LA ESTACION": ["18 DE OCTUBRE", "CONSOLACI√ìN"],
            "ESCUELA RECEPTORIA": ["CARMEN CENTRO", "CENTRO CENTRO", "CONSOLACI√ìN"],
            "GRUPO ESCOLAR DR RAFAEL PEREZ": ["VIRGEN DEL CARMEN", "CONSOLACI√ìN"],
            "LICEO ALFREDO PIETRI": ["LOS OJITOS", "LOS VENCEDORES", "CONSOLACI√ìN"],
            "ESCUELA BOLIVARIANA ROMERO GARCIA": ["SAN BERNARDO", "LA CAPILLA", "LAS HACIENDAS", "CONSOLACI√ìN"],
            "ESCUELA GRADUADA PEDRO GUAL": ["BOQUITA CENTRO", "INDIANA NORTE", "CONSOLACI√ìN"]
        };
        // Actualizar en memoria y en Firebase
        this.ubchToCommunityMap = configCorrecta;
        if (window.firebaseDB && window.firebaseDB.ubchCollection) {
            await window.firebaseDB.ubchCollection.doc('config').set({
                mapping: configCorrecta,
                lastUpdated: (window.firebase && window.firebase.firestore && window.firebase.firestore.FieldValue && window.firebase.firestore.FieldValue.serverTimestamp) ? window.firebase.firestore.FieldValue.serverTimestamp() : new Date()
            });
            console.log('‚úÖ Configuraci√≥n CV actualizada en Firebase');
        } else {
            console.warn('‚ö†Ô∏è No se pudo actualizar Firebase, usando solo local');
        }
        // Re-renderizar la p√°gina actual
        if (this.currentPage === 'registration') {
            this.renderRegistrationPage();
        }
        this.showMessage('Configuraci√≥n actualizada correctamente en Firebase y local', 'success', 'registration');
    }

    // M√©todo para sincronizaci√≥n de datos (requerido por auto-init.js)
    async syncData() {
        try {
            console.log('üîÑ Sincronizando datos...');
            await this.loadDataFromFirebase();
            this.updateAllDataDisplays();
            console.log('‚úÖ Datos sincronizados correctamente');
            return true;
        } catch (error) {
            console.error('‚ùå Error sincronizando datos:', error);
            return false;
        }
    }

    async loadRegistrations() {
        try {
            console.log('üì• Cargando datos desde Firebase...');
            const snapshot = await this.votesCollection.get();
            this.votes = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));
            console.log(`‚úÖ ${this.votes.length} votos cargados desde Firebase`);
            
            // Cargar configuraci√≥n UBCH solo una vez
            if (!this.ubchConfigLoaded) {
                await this.loadUBCHConfig();
                this.ubchConfigLoaded = true;
            }
            
            this.updateAllScreens();
            return this.votes;
        } catch (error) {
            console.error('‚ùå Error cargando registros:', error);
            throw error;
        }
    }

    setupNavigationByRole() {
        const currentUser = this.getCurrentUser();
        if (!currentUser) return;

        // Ocultar todos los botones primero
        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(btn => btn.style.display = 'none');

        // Mostrar botones seg√∫n el rol
        if (currentUser.rol === 'verificador') {
            // Solo mostrar bot√≥n de confirmaci√≥n de voto
            const navCheckIn = document.getElementById('nav-check-in');
            if (navCheckIn) {
                navCheckIn.style.display = 'block';
                navCheckIn.classList.add('active');
            }
        } else if (currentUser.rol === 'registrador') {
            // Solo mostrar bot√≥n de registro
            const navRegistration = document.getElementById('nav-registration');
            if (navRegistration) {
                navRegistration.style.display = 'block';
                navRegistration.classList.add('active');
            }
        } else {
            // Superusuarios y admins tienen acceso a todo
            navButtons.forEach(btn => btn.style.display = 'block');
        }
    }

    updateUserId() {
        const userIdElement = document.getElementById('userId');
        const userForHeader = this.getCurrentUser();
        if (userIdElement && userForHeader && userForHeader.username) {
            userIdElement.textContent = `${userForHeader.username} (${userForHeader.rol})`;
        } else if (userIdElement) {
            userIdElement.textContent = '';
        }
    }

    // 1. M√©todos para el modo proyecci√≥n
    enterProjectionMode() {
        const overlay = document.getElementById('projection-view');
        overlay.style.display = 'block';
        document.body.classList.add('projection-mode');
        this.updateProjection();
        this.projectionInterval = setInterval(() => this.updateProjection(), 30000);
        // Solicitar pantalla completa
        if (overlay.requestFullscreen) {
            overlay.requestFullscreen();
        } else if (overlay.webkitRequestFullscreen) { // Safari
            overlay.webkitRequestFullscreen();
        } else if (overlay.msRequestFullscreen) { // IE11
            overlay.msRequestFullscreen();
        }
    }

    exitProjectionMode() {
        const overlay = document.getElementById('projection-view');
        overlay.style.display = 'none';
        document.body.classList.remove('projection-mode');
        if (this.projectionInterval) clearInterval(this.projectionInterval);
        // Salir de pantalla completa si est√° activo
        if (document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement) {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.webkitExitFullscreen) { // Safari
                document.webkitExitFullscreen();
            } else if (document.msExitFullscreen) { // IE11
                document.msExitFullscreen();
            }
        }
    }

    updateProjection() {
        // Obtener todos los CV posibles (19) desde this.ubchToCommunityMap
        const allCVs = Object.keys(this.ubchToCommunityMap || {}).sort();
        // Filtrar votos actuales
        const votes = this.votes || [];
        // Contar votos por CV
        const votosPorCV = {};
        const registradosPorCV = {};
        allCVs.forEach(cv => { votosPorCV[cv] = 0; registradosPorCV[cv] = 0; });
        votes.forEach(v => {
            if (v.ubch && registradosPorCV.hasOwnProperty(v.ubch)) {
                registradosPorCV[v.ubch]++;
                if (v.voted) votosPorCV[v.ubch]++;
            }
        });
        // Totales
        const totalRegistrados = votes.length;
        const totalVotaron = votes.filter(v => v.voted).length;
        const porcentaje = totalRegistrados ? ((totalVotaron / totalRegistrados) * 100).toFixed(1) : 0;
        // Actualizar DOM general
        document.getElementById('projection-votes').textContent = totalVotaron.toLocaleString();
        document.getElementById('projection-text').textContent = `${totalVotaron.toLocaleString()} de ${totalRegistrados.toLocaleString()}`;
        const fill = document.getElementById('projection-progress-fill');
        fill.style.width = porcentaje + '%';
        fill.textContent = porcentaje + '%';
        // Mostrar los 19 CV como tarjetas
        const rankingList = document.getElementById('projection-ubch-list');
        rankingList.innerHTML = allCVs.map((cv, i) => {
            const votos = votosPorCV[cv];
            const registrados = registradosPorCV[cv];
            const porcentajeCV = registrados ? ((votos / registrados) * 100).toFixed(1) : 0;
            return `
            <div class='projection-item' style="background:#232946; border-radius:1rem; padding:1rem 1.2rem; margin-bottom:1.2rem; box-shadow:0 2px 8px rgba(80,112,255,0.08);">
                <div class='projection-item-header' style="display:flex; justify-content:space-between; align-items:center; margin-bottom:0.5rem;">
                    <span class='projection-item-name' style="font-size:1.1em; font-weight:600; color:#fff;">${i+1}. ${cv}</span>
                    <span class='projection-item-count' style="font-size:1.2em; font-weight:700; color:#43e97b;">${votos}</span>
                </div>
                <div style="font-size:0.95em; color:#bfc9d1; margin-bottom:0.3em;">Registrados: ${registrados}</div>
                <div class='projection-item-progress' style="width:100%; height:0.8rem; background:#374151; border-radius:0.5rem; overflow:hidden; margin-bottom:0.2em;">
                    <div class='projection-item-progress-fill' style="height:100%; background:linear-gradient(90deg,#10b981,#34d399); width:${porcentajeCV}%; transition:width 0.5s; border-radius:0.5rem;"></div>
                </div>
                <div style="font-size:0.9em; color:#43e97b;">${porcentajeCV}% participaci√≥n</div>
            </div>
            `;
        }).join('');
    }

    // 2. Asignar eventos al cargar la p√°gina principal
    setupProjectionEvents() {
        const btn = document.getElementById('projection-btn');
        const exitBtn = document.getElementById('exit-projection-btn');
        if (btn) btn.onclick = () => this.enterProjectionMode();
        if (exitBtn) exitBtn.onclick = () => this.exitProjectionMode();
        // Cerrar con Escape
        document.addEventListener('keydown', (e) => {
            const overlay = document.getElementById('projection-view');
            if (overlay.style.display !== 'none' && (e.key === 'Escape' || e.key === 'Esc')) {
                this.exitProjectionMode();
            }
        });
    }

    // Funci√≥n para verificar el estado del listener de sincronizaci√≥n
    isSyncListenerActive() {
        return this.unsubscribeListener && typeof this.unsubscribeListener === 'function';
    }

    // Funci√≥n para reinicializar el listener de sincronizaci√≥n
    async reinitializeSyncListener() {
        console.log('üîÑ Reinicializando listener de sincronizaci√≥n...');
        
        try {
            // Limpiar listener anterior
            if (this.unsubscribeListener && typeof this.unsubscribeListener === 'function') {
                this.unsubscribeListener();
                this.unsubscribeListener = null;
            }
            
            // Esperar un momento antes de reconfigurar
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Reconfigurar listener
            this.setupRealtimeListener();
            
            console.log('‚úÖ Listener de sincronizaci√≥n reinicializado correctamente');
            
        } catch (error) {
            console.error('‚ùå Error reinicializando listener:', error);
        }
    }

    // Funci√≥n para manejar errores de inicializaci√≥n
    handleInitError(error, context) {
        console.error(`‚ùå Error en ${context}:`, error);
        
        // Mostrar mensaje al usuario
        this.showMessage(`Error de inicializaci√≥n: ${error.message}`, 'error', 'registration');
        
        // Intentar recuperaci√≥n autom√°tica
        setTimeout(() => {
            console.log(`üîÑ Intentando recuperaci√≥n autom√°tica para ${context}...`);
            this.init();
        }, 5000);
    }
}

// Inicializar el sistema cuando el DOM est√© listo
// Comentado para evitar conflictos con auto-init.js
// document.addEventListener('DOMContentLoaded', () => {
//     window.votingSystem = new VotingSystemFirebase();
// }); 

// === MIS REGISTROS ===
// Mostrar los registros del usuario actual en la tabla de 'Mis Registros'
window.renderMyRecordsTable = async function() {
    const tableBody = document.querySelector('#myrecords-table tbody');
    if (!tableBody) return;
    tableBody.innerHTML = '<tr><td colspan="8">Cargando...</td></tr>';
    try {
        // Obtener usuario actual
        const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
        const username = normalizarUsuario(currentUser.username || '');
        if (!username) {
            tableBody.innerHTML = '<tr><td colspan="8">No hay usuario activo</td></tr>';
            return;
        }
        
        console.log('üîç Buscando registros para usuario:', username);
        
        // Obtener registros de m√∫ltiples fuentes
        const records = [];
        
        // 1. Registros de Firebase
        try {
        const snapshot = await window.firebaseDB.votesCollection.where('registeredBy', '==', username).orderBy('createdAt', 'desc').limit(500).get();
        snapshot.forEach(doc => {
            const d = doc.data();
                records.push({
                    name: d.name || '',
                    cedula: d.cedula || '',
                    telefono: d.telefono || '',
                    sexo: d.sexo || '',
                    edad: d.edad || '',
                    ubch: d.ubch || '',
                    community: d.community || '',
                    registeredAt: d.registeredAt ? (new Date(d.registeredAt)).toLocaleString('es-VE', {hour12:true}) : '',
                    source: 'Firebase'
                });
            });
            console.log('üìä Registros de Firebase:', records.length);
        } catch (error) {
            console.error('‚ùå Error consultando Firebase:', error);
        }
        
        // 2. Registros locales (misRegistrosLocales)
        try {
            const registrosLocales = JSON.parse(localStorage.getItem('misRegistrosLocales') || '[]');
            registrosLocales.forEach(r => {
                records.push({
                    name: r.nombre || '',
                    cedula: r.cedula || '',
                    telefono: r.telefono || '',
                    sexo: r.sexo || '',
                    edad: r.edad || '',
                    ubch: r.ubch || '',
                    community: r.comunidad || '',
                    registeredAt: r.fecha || '',
                    source: 'Local'
                });
            });
            console.log('üíæ Registros locales agregados:', registrosLocales.length);
        } catch (error) {
            console.error('‚ùå Error consultando registros locales:', error);
        }
        
        // 3. Cola offline
        try {
            if (window.offlineQueueManager && typeof window.offlineQueueManager.obtenerColaLocal === 'function') {
                const colaLocal = window.offlineQueueManager.obtenerColaLocal();
                colaLocal.forEach(r => {
                    records.push({
                        name: r.name || '',
                        cedula: r.cedula || '',
                        telefono: r.telefono || '',
                        sexo: r.sexo || '',
                        edad: r.edad || '',
                        ubch: r.ubch || '',
                        community: r.community || '',
                        registeredAt: r.registeredAt ? (new Date(r.registeredAt)).toLocaleString('es-VE', {hour12:true}) : '',
                        source: 'Cola'
                    });
                });
                console.log('üîÑ Registros de cola agregados:', colaLocal.length);
            }
        } catch (error) {
            console.error('‚ùå Error consultando cola offline:', error);
        }
        
        // Eliminar duplicados por c√©dula (mantener el m√°s reciente)
        const uniqueRecords = [];
        const seenCedulas = new Set();
        records.forEach(record => {
            if (!seenCedulas.has(record.cedula)) {
                seenCedulas.add(record.cedula);
                uniqueRecords.push(record);
            }
        });
        
        console.log('üìã Total de registros √∫nicos:', uniqueRecords.length);
        if (uniqueRecords.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="8">No tienes registros propios a√∫n.</td></tr>';
            return;
        }
        
        // Funci√≥n para renderizar filas filtradas
        function renderRows(filtered) {
            if (!filtered.length) {
                tableBody.innerHTML = '<tr><td colspan="8">No se encontraron registros.</td></tr>';
                return;
            }
            tableBody.innerHTML = filtered.map(d => `
                <tr>
                    <td>${d.name}</td>
                    <td>${d.cedula}</td>
                    <td>${d.telefono}</td>
                    <td>${d.sexo}</td>
                    <td>${d.edad}</td>
                    <td>${d.ubch}</td>
                    <td>${d.community}</td>
                    <td>${d.registeredAt}</td>
                </tr>
            `).join('');
        }
        // Inicial: mostrar todos
        renderRows(uniqueRecords);
        // Filtrado en tiempo real
        const searchInput = document.getElementById('myrecords-search');
        if (searchInput) {
            searchInput.value = '';
            searchInput.oninput = function() {
                const q = this.value.trim().toLowerCase();
                if (!q) return renderRows(uniqueRecords);
                const filtered = uniqueRecords.filter(d =>
                    Object.values(d).some(val => (val+'').toLowerCase().includes(q))
                );
                renderRows(filtered);
            };
        }
    } catch (e) {
        tableBody.innerHTML = '<tr><td colspan="8">Error cargando registros</td></tr>';
    }
};

// Descargar los registros del usuario actual como CSV
window.downloadMyRecordsAsCSV = async function() {
    // Obtener usuario actual
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const username = normalizarUsuario(currentUser.username || '');
    if (!username) return alert('No hay usuario activo');
    const snapshot = await window.firebaseDB.votesCollection.where('registeredBy', '==', username).orderBy('createdAt', 'desc').limit(1000).get();
    if (snapshot.empty) return alert('No tienes registros propios a√∫n.');
    let csv = 'Nombre,C√©dula,Tel√©fono,Sexo,Edad,CV,Comunidad,Fecha\n';
    snapshot.forEach(doc => {
        const d = doc.data();
        csv += `"${d.name||''}","${d.cedula||''}","${d.telefono||''}","${d.sexo||''}","${d.edad||''}","${d.ubch||''}","${d.community||''}","${d.registeredAt ? (new Date(d.registeredAt)).toLocaleString('es-VE', {hour12:true}) : ''}"
`;
    });
    const blob = new Blob([csv], {type: 'text/csv'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'mis_registros.csv';
    document.body.appendChild(a);
    a.click();
    setTimeout(() => { document.body.removeChild(a); URL.revokeObjectURL(url); }, 100);
};

// Mostrar la tabla cada vez que se entra en la secci√≥n
if (typeof switchRegistrationMode === 'function') {
    const oldSwitch = switchRegistrationMode;
    window.switchRegistrationMode = function(mode) {
        oldSwitch(mode);
        if (mode === 'myrecords') {
            window.renderMyRecordsTable();
        }
    };
}

// Funci√≥n para normalizar el nombre de usuario (min√∫sculas y sin espacios extra)
function normalizarUsuario(username) {
    return (username || '').trim().toLowerCase();
}

// --- Exportar Mis Registros (solo usuario actual) ---
document.addEventListener('DOMContentLoaded', function() {
    const btnCSV = document.getElementById('myrecords-export-csv');
    const btnPDF = document.getElementById('myrecords-export-pdf');
    if (btnCSV) {
        btnCSV.addEventListener('click', async function() {
            const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
            const username = normalizarUsuario(currentUser.username || '');
            if (!username) return alert('No hay usuario activo');
            const snapshot = await window.firebaseDB.votesCollection.where('registeredBy', '==', username).orderBy('createdAt', 'desc').limit(1000).get();
            if (snapshot.empty) return alert('No tienes registros propios a√∫n.');
            let csv = 'Nombre;C√©dula;Tel√©fono;Sexo;Edad;CV;Comunidad;Fecha\n';
            snapshot.forEach(doc => {
                const d = doc.data();
                csv += `"${d.name||''}";"${d.cedula||''}";"${d.telefono||''}";"${d.sexo||''}";"${d.edad||''}";"${d.ubch||''}";"${d.community||''}";"${d.registeredAt ? (new Date(d.registeredAt)).toLocaleString('es-VE', {hour12:true}) : ''}"\n`;
            });
            const BOM = '\uFEFF';
            const blob = new Blob([BOM + csv], {type: 'text/csv;charset=utf-8;'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'mis_registros.csv';
            document.body.appendChild(a);
            a.click();
            setTimeout(() => { document.body.removeChild(a); URL.revokeObjectURL(url); }, 100);
        });
    }
    if (btnPDF) {
        btnPDF.addEventListener('click', async function() {
            if (!window.jspdf || !window.jspdf.jsPDF) {
                alert('Error: Librer√≠a PDF no disponible');
                return;
            }
            const { jsPDF } = window.jspdf;
            const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
            const username = normalizarUsuario(currentUser.username || '');
            if (!username) return alert('No hay usuario activo');
            const snapshot = await window.firebaseDB.votesCollection.where('registeredBy', '==', username).orderBy('createdAt', 'desc').limit(1000).get();
            if (snapshot.empty) return alert('No tienes registros propios a√∫n.');
            const doc = new jsPDF();
            doc.setFontSize(16);
            doc.text('Mis Registros', 20, 20);
            doc.setFontSize(10);
            doc.text(`Total de registros: ${snapshot.size}`, 20, 30);
            doc.text(`Fecha: ${new Date().toLocaleDateString()} - ${new Date().toLocaleTimeString()}`, 20, 36);
            // Datos de la tabla
            const tableData = [];
            snapshot.forEach(docSnap => {
                const d = docSnap.data();
                tableData.push([
                    d.name || '',
                    d.cedula || '',
                    d.telefono || '',
                    d.sexo || '',
                    d.edad || '',
                    d.ubch || '',
                    d.community || '',
                    d.registeredAt ? (new Date(d.registeredAt)).toLocaleString('es-VE', {hour12:true}) : ''
                ]);
            });
            doc.autoTable({
                head: [['Nombre', 'C√©dula', 'Tel√©fono', 'Sexo', 'Edad', 'CV', 'Comunidad', 'Fecha']],
                body: tableData,
                startY: 45,
                styles: { fontSize: 8, cellPadding: 2 },
                headStyles: { fillColor: [41, 128, 185], textColor: 255 },
                alternateRowStyles: { fillColor: [245, 245, 245] }
            });
            doc.save('mis_registros.pdf');
        });
    }
});

const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
const username = (currentUser.username || '').trim().toLowerCase();

// Verificar que Firebase est√© disponible antes de usar votesCollection
if (window.firebaseDB && window.firebaseDB.votesCollection) {
    window.firebaseDB.votesCollection.where('registeredBy', '==', username).get().then(snap => console.log('Registros:', snap.size));
} else {
    console.log('‚ö†Ô∏è Firebase no est√° listo a√∫n, verificando registros m√°s tarde...');
}

document.addEventListener('DOMContentLoaded', function() {
    const btnUpdateOld = document.getElementById('myrecords-update-old');
    if (btnUpdateOld) {
        btnUpdateOld.addEventListener('click', async function() {
            if (!window.firebaseDB || !window.firebaseDB.votesCollection) {
                alert('Firebase no est√° listo para actualizar registros.');
                return;
            }
            const usernameCorrecto = 'victor';
            const confirmacion = confirm('¬øSeguro que quieres vincular todos los registros antiguos (sin usuario) a tu usuario actual?');
            if (!confirmacion) return;
            let actualizados = 0;
            const snapshot = await window.firebaseDB.votesCollection.get();
            for (const doc of snapshot.docs) {
                const data = doc.data();
                if (!data.registeredBy || data.registeredBy === '' || data.registeredBy === null) {
                    try {
                        await window.firebaseDB.votesCollection.doc(doc.id).update({
                            registeredBy: usernameCorrecto
                        });
                        actualizados++;
                        console.log('Actualizado:', doc.id);
                    } catch (err) {
                        console.error('Error actualizando', doc.id, err);
                    }
                }
            }
            alert('Registros antiguos actualizados: ' + actualizados);
            if (window.renderMyRecordsTable) window.renderMyRecordsTable();
        });
    }
});

// Guardar registro localmente tras registro exitoso
function guardarRegistroLocal(registro) {
    let registros = JSON.parse(localStorage.getItem('misRegistrosLocales') || '[]');
    registros.push(registro);
    localStorage.setItem('misRegistrosLocales', JSON.stringify(registros));
}

// Renderizar tarjetas en Mis Registros
async function renderMisRegistrosComoTarjetas(filtro = '') {
    const contenedor = document.getElementById('myrecords-cards');
    if (!contenedor) return;
    
    // Obtener usuario actual
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const username = normalizarUsuario(currentUser.username || '');
    if (!username) {
        contenedor.innerHTML = '<p style="text-align:center;">No hay usuario activo</p>';
        return;
    }
    
    // Obtener registros de m√∫ltiples fuentes (igual que renderMyRecordsTable)
    const records = [];
    
    // 1. Registros locales
    try {
        const registrosLocales = JSON.parse(localStorage.getItem('misRegistrosLocales') || '[]');
        registrosLocales.forEach(r => {
            records.push({
                nombre: r.nombre || '',
                cedula: r.cedula || '',
                telefono: r.telefono || '',
                sexo: r.sexo || '',
                edad: r.edad || '',
                ubch: r.ubch || '',
                comunidad: r.comunidad || '',
                fecha: r.fecha || ''
            });
        });
    } catch (error) {
        console.error('‚ùå Error consultando registros locales para tarjetas:', error);
    }
    
    // 2. Cola offline
    try {
        if (window.offlineQueueManager && typeof window.offlineQueueManager.obtenerColaLocal === 'function') {
            const colaLocal = window.offlineQueueManager.obtenerColaLocal();
            colaLocal.forEach(r => {
                records.push({
                    nombre: r.name || '',
                    cedula: r.cedula || '',
                    telefono: r.telefono || '',
                    sexo: r.sexo || '',
                    edad: r.edad || '',
                    ubch: r.ubch || '',
                    comunidad: r.community || '',
                    fecha: r.registeredAt ? (new Date(r.registeredAt)).toLocaleString('es-VE', {hour12:true}) : ''
                });
            });
        }
    } catch (error) {
        console.error('‚ùå Error consultando cola offline para tarjetas:', error);
    }
    
    // Eliminar duplicados por c√©dula
    const uniqueRecords = [];
    const seenCedulas = new Set();
    records.forEach(record => {
        if (!seenCedulas.has(record.cedula)) {
            seenCedulas.add(record.cedula);
            uniqueRecords.push(record);
        }
    });
    
    // Aplicar filtro
    let registros = uniqueRecords;
    if (filtro) {
        const f = filtro.toLowerCase();
        registros = uniqueRecords.filter(r =>
            (r.nombre && r.nombre.toLowerCase().includes(f)) ||
            (r.cedula && r.cedula.toLowerCase().includes(f)) ||
            (r.telefono && r.telefono.toLowerCase().includes(f)) ||
            (r.sexo && r.sexo.toLowerCase().includes(f)) ||
            (r.edad && String(r.edad).includes(f)) ||
            (r.ubch && r.ubch.toLowerCase().includes(f)) ||
            (r.comunidad && r.comunidad.toLowerCase().includes(f)) ||
            (r.fecha && r.fecha.toLowerCase().includes(f))
        );
    }
    
    if (registros.length === 0) {
        contenedor.innerHTML = '<p style="text-align:center;">No tienes registros propios a√∫n.</p>';
        return;
    }
    
    contenedor.innerHTML = registros.map(reg => `
        <div class="tarjeta-registro">
            <strong>${reg.nombre}</strong> - ${reg.cedula}<br>
            Tel: ${reg.telefono} | Sexo: ${reg.sexo} | Edad: ${reg.edad}<br>
            CV: ${reg.ubch} | Comunidad: ${reg.comunidad}<br>
            <small>${reg.fecha}</small>
        </div>
    `).join('');
}

// Escuchar el input de b√∫squeda
const myrecordsSearch = document.getElementById('myrecords-search');
if (myrecordsSearch) {
    myrecordsSearch.addEventListener('input', async function() {
        await renderMisRegistrosComoTarjetas(this.value);
    });
}

// Llamar al render al cargar la p√°gina
if (document.getElementById('myrecords-cards')) {
    renderMisRegistrosComoTarjetas();
}

// Modificar el flujo de registro exitoso para guardar localmente
// Busca donde se muestra el mensaje de registro exitoso y agrega:
// guardarRegistroLocal({
//     nombre: name,
//     cedula: cedula,
//     telefono: telefono,
//     sexo: sexo,
//     edad: edad,
//     ubch: ubch,
//     comunidad: community,
//     fecha: new Date().toLocaleString()
// });