// reparacion-sincronizacion.js
// Reparaci√≥n espec√≠fica para problemas de sincronizaci√≥n y funcionalidad

console.log('üîß Iniciando reparaci√≥n de sincronizaci√≥n...');

// Funci√≥n para reparar el sistema de votos
function repararSistemaVotos() {
    console.log('üîß === REPARACI√ìN DEL SISTEMA DE VOTOS ===');
    
    // 1. Verificar y crear sistema si no existe
    if (!window.votingSystem) {
        console.log('üîß Creando sistema de votos...');
        
        if (typeof VotingSystemFirebase !== 'undefined') {
            try {
                window.votingSystem = new VotingSystemFirebase();
                console.log('‚úÖ Sistema Firebase creado');
            } catch (error) {
                console.error('‚ùå Error creando VotingSystemFirebase:', error);
                if (typeof VotingSystem !== 'undefined') {
                    window.votingSystem = new VotingSystem();
                    console.log('‚úÖ Sistema b√°sico creado como fallback');
                }
            }
        } else if (typeof VotingSystem !== 'undefined') {
            window.votingSystem = new VotingSystem();
            console.log('‚úÖ Sistema b√°sico creado');
        } else {
            console.error('‚ùå No se pudo crear el sistema de votos');
            return false;
        }
    }
    
    // 2. Inicializar sistema si no est√° inicializado
    if (window.votingSystem && !window.votingSystemInitialized) {
        try {
            console.log('üîß Inicializando sistema...');
            window.votingSystem.init();
            window.votingSystemInitialized = true;
            console.log('‚úÖ Sistema inicializado');
        } catch (error) {
            console.error('‚ùå Error inicializando sistema:', error);
        }
    }
    
    return true;
}

// Funci√≥n para reparar event listeners
function repararEventListeners() {
    console.log('üîß === REPARACI√ìN DE EVENT LISTENERS ===');
    
    // 1. Reparar formulario de registro
    try {
        const form = document.getElementById('registration-form');
        if (form) {
            // Remover listeners existentes
            form.onsubmit = null;
            
            // Agregar nuevo listener
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                console.log('üìù Enviando formulario de registro...');
                
                if (window.votingSystem && window.votingSystem.handleRegistration) {
                    window.votingSystem.handleRegistration();
                } else {
                    console.error('‚ùå M√©todo handleRegistration no disponible');
                    alert('Error: Sistema de registro no disponible');
                }
            });
            console.log('‚úÖ Event listener de registro reparado');
        }
    } catch (error) {
        console.error('‚ùå Error reparando event listener de registro:', error);
    }
    
    // 2. Reparar formulario de confirmaci√≥n
    try {
        const checkInForm = document.getElementById('check-in-form');
        if (checkInForm) {
            checkInForm.onsubmit = null;
            checkInForm.addEventListener('submit', function(e) {
                e.preventDefault();
                console.log('‚úÖ Confirmando voto...');
                
                if (window.votingSystem && window.votingSystem.handleCheckIn) {
                    window.votingSystem.handleCheckIn();
                } else {
                    console.error('‚ùå M√©todo handleCheckIn no disponible');
                    alert('Error: Sistema de confirmaci√≥n no disponible');
                }
            });
            console.log('‚úÖ Event listener de confirmaci√≥n reparado');
        }
    } catch (error) {
        console.error('‚ùå Error reparando event listener de confirmaci√≥n:', error);
    }
    
    // 3. Reparar navegaci√≥n
    try {
        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(btn => {
            const page = btn.dataset.page;
            if (page) {
                btn.onclick = function() {
                    console.log(`üîÑ Navegando a: ${page}`);
                    if (window.votingSystem && window.votingSystem.navigateToPage) {
                        window.votingSystem.navigateToPage(page);
                    } else {
                        console.error('‚ùå M√©todo navigateToPage no disponible');
                        // Fallback b√°sico
                        const pages = document.querySelectorAll('.page');
                        pages.forEach(p => p.classList.remove('active'));
                        const targetPage = document.getElementById(`${page}-page`);
                        if (targetPage) {
                            targetPage.classList.add('active');
                        }
                    }
                };
            }
        });
        console.log(`‚úÖ ${navButtons.length} botones de navegaci√≥n reparados`);
    } catch (error) {
        console.error('‚ùå Error reparando navegaci√≥n:', error);
    }
}

// Funci√≥n para reparar sincronizaci√≥n
function repararSincronizacion() {
    console.log('üîß === REPARACI√ìN DE SINCRONIZACI√ìN ===');
    
    // 1. Verificar Firebase
    if (!window.firebaseDB) {
        console.log('üîß Configurando Firebase fallback...');
        window.firebaseDB = {
            isAvailable: false,
            db: null,
            votesCollection: {
                get: async () => ({ docs: [] }),
                add: async (data) => ({ id: 'local_' + Date.now() }),
                doc: (id) => ({
                    get: async () => ({ exists: false, data: () => null }),
                    set: async (data) => ({ id }),
                    update: async (data) => ({ id }),
                    delete: async () => ({ id })
                })
            },
            ubchCollection: {
                doc: (id) => ({
                    get: async () => ({ exists: false, data: () => null }),
                    set: async (data) => ({ id })
                })
            }
        };
        console.log('‚úÖ Firebase fallback configurado');
    }
    
    // 2. Configurar sincronizaci√≥n local
    if (window.votingSystem) {
        // Agregar m√©todo de sincronizaci√≥n si no existe
        if (!window.votingSystem.syncToLocal) {
            window.votingSystem.syncToLocal = function() {
                try {
                    if (this.votes && this.votes.length > 0) {
                        localStorage.setItem('localVotes', JSON.stringify(this.votes));
                        console.log(`‚úÖ ${this.votes.length} votos sincronizados localmente`);
                    }
                } catch (error) {
                    console.error('‚ùå Error sincronizando localmente:', error);
                }
            };
        }
        
        // Agregar m√©todo de carga local si no existe
        if (!window.votingSystem.loadFromLocal) {
            window.votingSystem.loadFromLocal = function() {
                try {
                    const localVotes = localStorage.getItem('localVotes');
                    if (localVotes) {
                        this.votes = JSON.parse(localVotes);
                        console.log(`‚úÖ ${this.votes.length} votos cargados localmente`);
                    }
                } catch (error) {
                    console.error('‚ùå Error cargando localmente:', error);
                    this.votes = [];
                }
            };
        }
        
        console.log('‚úÖ M√©todos de sincronizaci√≥n agregados');
    }
}

// Funci√≥n para reparar renderizado
function repararRenderizado() {
    console.log('üîß === REPARACI√ìN DE RENDERIZADO ===');
    
    if (window.votingSystem) {
        // Agregar m√©todo de renderizado b√°sico si no existe
        if (!window.votingSystem.renderCurrentPage) {
            window.votingSystem.renderCurrentPage = function() {
                console.log('üîß Renderizando p√°gina actual...');
                
                // Renderizar p√°gina de registro
                if (this.currentPage === 'registration') {
                    this.renderRegistrationPage();
                }
                // Renderizar p√°gina de confirmaci√≥n
                else if (this.currentPage === 'check-in') {
                    this.renderCheckInPage();
                }
                // Renderizar p√°gina de listado
                else if (this.currentPage === 'listado') {
                    this.renderListPage();
                }
                // Renderizar p√°gina de dashboard
                else if (this.currentPage === 'dashboard') {
                    this.renderDashboardPage();
                }
                // Renderizar p√°gina de estad√≠sticas
                else if (this.currentPage === 'statistics') {
                    this.renderStatisticsPage();
                }
            };
        }
        
        console.log('‚úÖ M√©todos de renderizado agregados');
    }
}

// Funci√≥n principal de reparaci√≥n
function ejecutarReparacionCompleta() {
    console.log('üîß === INICIANDO REPARACI√ìN COMPLETA ===');
    
    const resultados = [];
    
    // 1. Reparar sistema de votos
    try {
        const sistemaOK = repararSistemaVotos();
        resultados.push(sistemaOK ? '‚úÖ Sistema de votos reparado' : '‚ùå Error reparando sistema de votos');
    } catch (error) {
        console.error('‚ùå Error en reparaci√≥n de sistema:', error);
        resultados.push('‚ùå Error reparando sistema de votos');
    }
    
    // 2. Reparar event listeners
    try {
        repararEventListeners();
        resultados.push('‚úÖ Event listeners reparados');
    } catch (error) {
        console.error('‚ùå Error en reparaci√≥n de event listeners:', error);
        resultados.push('‚ùå Error reparando event listeners');
    }
    
    // 3. Reparar sincronizaci√≥n
    try {
        repararSincronizacion();
        resultados.push('‚úÖ Sincronizaci√≥n reparada');
    } catch (error) {
        console.error('‚ùå Error en reparaci√≥n de sincronizaci√≥n:', error);
        resultados.push('‚ùå Error reparando sincronizaci√≥n');
    }
    
    // 4. Reparar renderizado
    try {
        repararRenderizado();
        resultados.push('‚úÖ Renderizado reparado');
    } catch (error) {
        console.error('‚ùå Error en reparaci√≥n de renderizado:', error);
        resultados.push('‚ùå Error reparando renderizado');
    }
    
    // Mostrar resultados
    console.log('\nüìä === RESULTADOS DE REPARACI√ìN ===');
    resultados.forEach(resultado => console.log(resultado));
    
    // Verificar si la reparaci√≥n fue exitosa
    const exitos = resultados.filter(r => r.startsWith('‚úÖ')).length;
    const errores = resultados.filter(r => r.startsWith('‚ùå')).length;
    
    console.log(`\nüìä Resumen: ${exitos} exitos, ${errores} errores`);
    
    if (errores === 0) {
        console.log('üéâ Reparaci√≥n completada exitosamente');
        return true;
    } else {
        console.log('‚ö†Ô∏è Reparaci√≥n completada con algunos errores');
        return false;
    }
}

// Ejecutar reparaci√≥n despu√©s de un delay
setTimeout(() => {
    const reparacionExitosa = ejecutarReparacionCompleta();
    
    if (reparacionExitosa) {
        console.log('‚úÖ Sistema reparado y listo para usar');
    } else {
        console.log('‚ö†Ô∏è Sistema reparado con limitaciones');
    }
}, 2000);

console.log('üìã Script de reparaci√≥n de sincronizaci√≥n cargado'); 