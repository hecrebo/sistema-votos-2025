// voting-system-unified.js
// Sistema de Votos Unificado - Reemplaza todos los scripts conflictivos

console.log('üöÄ Iniciando Sistema de Votos Unificado...');

// === CONFIGURACI√ìN GLOBAL ===
window.systemConfig = {
    maxRetries: 5,
    retryDelay: 2000,
    debugMode: true
};

// === VERIFICACI√ìN DE INICIALIZACI√ìN ===
if (window.votingSystemInitialized) {
    console.log('‚ö†Ô∏è Sistema ya inicializado, evitando duplicaci√≥n');
} else {
    window.votingSystemInitialized = true;
    console.log('‚úÖ Bandera de inicializaci√≥n establecida');
}

// === CONFIGURACI√ìN DE FIREBASE FALLBACK ===
if (!window.firebaseDB) {
    console.log('‚ö†Ô∏è Firebase no disponible, configurando modo offline...');
    window.firebaseDB = {
        isAvailable: false,
        db: null,
        votesCollection: {
            get: async () => ({ docs: [] }),
            add: async (data) => ({ id: 'local_' + Date.now() }),
            doc: (id) => ({
                get: async () => ({ exists: false, data: () => null }),
                set: async (data) => ({ id }),
                update: async (data) => ({ id }),
                delete: async () => ({ id })
            }),
            limit: (num) => ({
                get: async () => ({ docs: [] })
            }),
            where: (field, operator, value) => ({
                get: async () => ({ docs: [], size: 0 })
            })
        },
        ubchCollection: {
            doc: (id) => ({
                get: async () => ({ exists: false, data: () => null }),
                set: async (data) => ({ id })
            })
        }
    };
}

// === CLASE BASE DEL SISTEMA ===
class VotingSystem {
    constructor() {
        this.currentPage = 'registration';
        this.votes = [];
        this.candidates = [];
        this.pdfLibrariesReady = false;
        this.projectionInterval = null;
        this.userId = null;
        this.registrationQueue = [];
        this.isProcessingQueue = false;
        this.concurrentRegistrations = 0;
        this.maxConcurrentRegistrations = 3;
        this.searchTimeout = null;
        this.cache = new Map();
        this.voteToDelete = null;
        this.voteToEdit = null;
        this.ubchToCommunityMap = {};
        this.currentPage = 'registration';
        this.pageSize = 20;
        this.filteredVotes = [];
        this.selectedVotes = [];
        this.currentSearchTerm = '';
        this.currentSortField = null;
        this.currentSortDirection = 'asc';
        this.currentDetailVote = null;
        
        console.log('‚úÖ Instancia de VotingSystem creada correctamente');
    }

    async init() {
        console.log('üîç Iniciando sistema de votos...');
        await this.loadDataLocally();
        this.setupEventListeners();
        this.renderCurrentPage();
    }

    setupEventListeners() {
        console.log('üîß Configurando event listeners...');
    }

    renderCurrentPage() {
        console.log('üìÑ Renderizando p√°gina actual...');
    }

    showMessage(message, type, page) {
        console.log(`üí¨ [${type}] ${message}`);
        const messageDiv = document.getElementById(`${page}-message`);
        if (messageDiv) {
            messageDiv.textContent = message;
            messageDiv.className = `message ${type}`;
            messageDiv.style.display = 'block';
            setTimeout(() => {
                messageDiv.style.display = 'none';
            }, 5000);
        }
    }

    setLoadingState(page, loading) {
        console.log(`‚è≥ [${page}] Loading: ${loading}`);
    }

    loadDataLocally() {
        try {
            console.log('üì• Cargando datos locales...');
            
            const localVotes = localStorage.getItem('localVotes');
            if (localVotes) {
                this.votes = JSON.parse(localVotes);
                console.log(`‚úÖ ${this.votes.length} votos cargados desde localStorage`);
            } else {
                this.votes = [];
                console.log('‚úÖ No hay votos locales, iniciando con lista vac√≠a');
            }
            
            this.ubchToCommunityMap = {
                "COLEGIO ASUNCION BELTRAN": ["EL VALLE", "VILLA OASIS", "VILLAS DEL CENTRO 1ERA ETAPA", "VILLAS DEL CENTRO 3ERA ETAPA B", "VILLAS DEL CENTRO 3ERA ETAPA C", "VILLAS DEL CENTRO IV ETAPA", "LA CAMACHERA", "COMUNIDAD NO DEFINIDA"],
                "LICEO JOSE FELIX RIBAS": ["EL CUJINAL", "LAS MORAS", "VILLA ESPERANZA 200", "VILLAS DEL CENTRO 3ERA ETAPA A", "LOS PALOMARES", "EL LAGO", "CARABALI I Y II", "EL BANCO", "CARIAPRIMA I Y II", "COMUNIDAD NO DEFINIDA"],
                "ESCUELA PRIMARIA BOLIVARIANA LA PRADERA": ["EL SAMAN", "GUAYABAL E", "PALOS GRANDES II", "PALOS GRANDES I", "TIERRAS DEL SOL", "LA CASTELLANA", "GARDENIAS I", "GARDENIAS II", "EL CERCADITO", "ALTAMIRA", "LA ENSENADA", "BUCARES", "GUAYABAL", "APAMATE", "EL REFUGIO", "LOS ROBLES", "ARAGUANEY", "COMUNIDAD NO DEFINIDA"],
                "CASA COMUNAL JOSE TOMAS GALLARDO": ["JOSE TOMAS GALLARDO A", "JOSE TOMAS GALLARDO B", "ALI PRIMERA", "COMUNIDAD NO DEFINIDA"],
                "ESCUELA 5 DE JULIO": ["10 DE AGOSTO", "CAMPO ALEGRE I", "CAMPO ALEGRE II", "5 DE JULIO", "COMUNIDAD NO DEFINIDA"],
                "ESCUELA CECILIO ACOSTA": ["VOLUNTAD DE DIOS", "LAS MALVINAS", "BRISAS DEL LAGO", "MAISANTA", "INDIANA SUR", "LOS CASTORES", "COMUNIDAD NO DEFINIDA"],
                "ESCUELA BASICA FE Y ALEGRIA": ["FE Y ALEGRIA", "BARRIO SOLIDARIO", "COMUNIDAD FUTURO", "COMUNIDAD NO DEFINIDA"],
                "ESCUELA GRADUADA ANTONIO JOSE DE SUCRE": ["PALO NEGRO OESTE", "JESUS DE NAZARETH", "SECTOR BOLIVAR", "PALO NEGRO ESTE", "COMUNIDAD NO DEFINIDA"],
                "CASA COMUNAL": ["LOS JABILLOS", "COMUNIDAD NO DEFINIDA"],
                "UNIDAD EDUCATIVA MONSE√ëOR JACINTO SOTO LAYERA": ["PROLONGACION MIRANDA", "SANTA EDUVIGES II", "COMUNIDAD NO DEFINIDA"],
                "BASE DE MISIONES LUISA CACERES DE ARISMENDI": ["4 DE DICIEMBRE", "23 DE ENERO", "19 DE ABRIL", "EL EREIG√úE", "COMUNIDAD NO DEFINIDA"],
                "ESCUELA ESTADAL ALEJO ZULOAGA": ["MANUELITA SAENZ", "PANAMERICANO", "COMUNIDAD NO DEFINIDA"],
                "UNIDAD EDUCATIVA MONSE√ëOR MONTES DE OCA": ["REMATE", "COMUNIDAD NO DEFINIDA"],
                "ESCUELA BASICA NACIONAL CONCENTRADA LA ESTACION": ["18 DE OCTUBRE", "COMUNIDAD NO DEFINIDA"],
                "ESCUELA RECEPTORIA": ["CARMEN CENTRO", "CENTRO CENTRO", "COMUNIDAD NO DEFINIDA"],
                "GRUPO ESCOLAR DR RAFAEL PEREZ": ["VIRGEN DEL CARMEN", "COMUNIDAD NO DEFINIDA"],
                "LICEO ALFREDO PIETRI": ["LOS OJITOS", "LOS VENCEDORES", "COMUNIDAD NO DEFINIDA"],
                "ESCUELA BOLIVARIANA ROMERO GARCIA": ["SAN BERNARDO", "LA CAPILLA", "LAS HACIENDAS", "COMUNIDAD NO DEFINIDA"],
                "ESCUELA GRADUADA PEDRO GUAL": ["BOQUITA CENTRO", "INDIANA NORTE", "COMUNIDAD NO DEFINIDA"]
            };
            
            console.log(`‚úÖ Configuraci√≥n UBCH cargada: ${Object.keys(this.ubchToCommunityMap).length} UBCH disponibles`);
            
        } catch (error) {
            console.error('‚ùå Error cargando datos locales:', error);
            this.votes = [];
            this.ubchToCommunityMap = {};
        }
    }

    getCurrentUser() {
        try {
            const userData = localStorage.getItem('currentUser');
            if (!userData) return null;
            
            const user = JSON.parse(userData);
            const sessionTime = localStorage.getItem('sessionTime');
            
            if (sessionTime && (Date.now() - parseInt(sessionTime)) > 24 * 60 * 60 * 1000) {
                this.logout();
                return null;
            }
            
            return user;
        } catch (error) {
            console.error('Error al verificar sesi√≥n:', error);
            return null;
        }
    }

    logout() {
        localStorage.removeItem('currentUser');
        localStorage.removeItem('sessionTime');
        if (window.location.pathname !== '/login.html') {
            window.location.href = 'login.html';
        }
    }

    validateRegistrationData(data) {
        if (!data.cedula || !/^\d{6,10}$/.test(data.cedula)) {
            return { isValid: false, message: 'C√©dula inv√°lida. Debe tener entre 6 y 10 d√≠gitos' };
        }
        if (!data.name || data.name.trim().length < 3) {
            return { isValid: false, message: 'Nombre inv√°lido. Debe tener al menos 3 caracteres' };
        }
        if (!data.telefono || !/^04\d{9}$/.test(data.telefono)) {
            return { isValid: false, message: 'Tel√©fono inv√°lido. Debe tener formato: 04xxxxxxxxx' };
        }
        if (!data.sexo || !['M', 'F'].includes(data.sexo)) {
            return { isValid: false, message: 'Debe seleccionar el sexo' };
        }
        if (!data.edad || isNaN(data.edad) || data.edad < 16 || data.edad > 120) {
            return { isValid: false, message: 'Edad inv√°lida. Debe estar entre 16 y 120 a√±os' };
        }
        if (!data.ubch || !data.community) {
            return { isValid: false, message: 'Debe seleccionar UBCH y comunidad' };
        }
        return { isValid: true, message: 'Datos v√°lidos' };
    }

    setupEventListeners() {
        // Navegaci√≥n
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.navigateToPage(e.target.dataset.page);
            });
        });

        // Formulario de registro
        const registrationForm = document.getElementById('registration-form');
        if (registrationForm) {
            registrationForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleRegistration();
            });
        }

        // Formulario de confirmaci√≥n de voto
        const checkInForm = document.getElementById('check-in-form');
        if (checkInForm) {
            checkInForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleCheckIn();
            });
        }

        console.log('‚úÖ Event listeners configurados');
    }

    navigateToPage(page) {
        const currentUser = this.getCurrentUser();
        if (!currentUser) {
            console.log('Usuario no autenticado');
            return;
        }

        if (currentUser.rol === 'verificador' && page !== 'check-in') {
            this.showMessage('No tienes permisos para acceder a esta p√°gina.', 'error', 'check-in');
            return;
        } else if (currentUser.rol === 'registrador' && page !== 'registration') {
            this.showMessage('No tienes permisos para acceder a esta p√°gina.', 'error', 'registration');
            return;
        }

        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        const navBtn = document.querySelector(`[data-page="${page}"]`);
        if (navBtn) {
            navBtn.classList.add('active');
        }

        document.querySelectorAll('.page').forEach(p => {
            p.classList.remove('active');
        });

        const pageElement = document.getElementById(`${page}-page`);
        if (pageElement) {
            pageElement.classList.add('active');
        }
        this.currentPage = page;
        this.renderCurrentPage();
    }

    renderCurrentPage() {
        console.log('üîç DEBUG: renderCurrentPage llamado con currentPage:', this.currentPage);
        switch (this.currentPage) {
            case 'registration':
                this.renderRegistrationPage();
                break;
            case 'check-in':
                this.renderCheckInPage();
                break;
            case 'listado':
                this.renderListPage();
                break;
            case 'dashboard':
                this.renderDashboardPage();
                break;
            case 'statistics':
                this.renderStatisticsPage();
                break;
            default:
                console.log('üîç DEBUG: P√°gina no reconocida:', this.currentPage);
        }
    }

    renderRegistrationPage() {
        console.log('üîç DEBUG: Iniciando renderRegistrationPage...');
        
        const ubchSelect = document.getElementById('ubch');
        const communitySelect = document.getElementById('community');
        const form = document.getElementById('registration-form');

        if (!ubchSelect || !communitySelect || !form) {
            console.error('‚ùå Elementos del formulario no encontrados');
            return;
        }

        // Limpiar opciones
        ubchSelect.innerHTML = '<option value="">Selecciona un Centro de Votaci√≥n (CV)</option>';
        communitySelect.innerHTML = '<option value="">Selecciona una comunidad</option>';

        if (!this.ubchToCommunityMap || Object.keys(this.ubchToCommunityMap).length === 0) {
            console.log('‚ö†Ô∏è No hay datos disponibles');
            form.querySelectorAll('input, select, button').forEach(el => el.disabled = true);
            this.showMessage('Cargando datos...', 'info', 'registration');
            return;
        }

        // Habilitar formulario
        form.querySelectorAll('input, select, button').forEach(el => el.disabled = false);

        // Cargar todas las comunidades disponibles
        const todasLasComunidades = new Set();
        Object.values(this.ubchToCommunityMap).forEach(comunidades => {
            comunidades.forEach(comunidad => todasLasComunidades.add(comunidad));
        });

        // Llenar select de comunidades
        Array.from(todasLasComunidades).sort().forEach(comunidad => {
            const option = document.createElement('option');
            option.value = comunidad;
            option.textContent = comunidad;
            communitySelect.appendChild(option);
        });

        // Llenar select de Centros de Votaci√≥n
        Object.keys(this.ubchToCommunityMap).sort().forEach(ubch => {
            const option = document.createElement('option');
            option.value = ubch;
            option.textContent = ubch;
            ubchSelect.appendChild(option);
        });
        
        console.log('‚úÖ Datos cargados correctamente en el formulario');
        this.showMessage(`Formulario listo con ${todasLasComunidades.size} comunidades disponibles`, 'success', 'registration');
    }

    renderCheckInPage() {
        // La p√°gina ya est√° renderizada en el HTML
        console.log('‚úÖ P√°gina de check-in renderizada');
    }

    renderListPage() {
        console.log('üîÑ Renderizando p√°gina de listado...');
        this.renderVotesTable();
        console.log('‚úÖ P√°gina de listado renderizada');
    }

    renderDashboardPage() {
        const totalRegistered = this.votes.length;
        const totalVoted = this.votes.filter(vote => vote.voted).length;
        const percentage = totalRegistered > 0 ? (totalVoted / totalRegistered) * 100 : 0;

        const totalRegisteredEl = document.getElementById('total-registered');
        const totalVotedEl = document.getElementById('total-voted');
        const voteProgressEl = document.getElementById('vote-progress');
        const progressTextEl = document.getElementById('progress-text');

        if (totalRegisteredEl) totalRegisteredEl.textContent = totalRegistered;
        if (totalVotedEl) totalVotedEl.textContent = totalVoted;
        if (voteProgressEl) {
            voteProgressEl.style.width = `${percentage}%`;
            voteProgressEl.textContent = `${percentage.toFixed(1)}%`;
        }
        if (progressTextEl) {
            progressTextEl.textContent = `${totalVoted} de ${totalRegistered} personas han votado.`;
        }

        console.log('‚úÖ Dashboard renderizado');
    }

    renderStatisticsPage() {
        const votedVotes = this.votes.filter(vote => vote.voted);
        
        // Estad√≠sticas por UBCH
        const ubchStats = {};
        votedVotes.forEach(vote => {
            ubchStats[vote.ubch] = (ubchStats[vote.ubch] || 0) + 1;
        });

        // Estad√≠sticas por Comunidad
        const communityStats = {};
        votedVotes.forEach(vote => {
            communityStats[vote.community] = (communityStats[vote.community] || 0) + 1;
        });

        // Estad√≠sticas por Sexo
        const sexoStats = {};
        votedVotes.forEach(vote => {
            const sexo = vote.sexo === 'M' ? 'Masculino' : vote.sexo === 'F' ? 'Femenino' : 'No especificado';
            sexoStats[sexo] = (sexoStats[sexo] || 0) + 1;
        });

        // Estad√≠sticas por Rango de Edad
        const edadStats = {};
        votedVotes.forEach(vote => {
            const edad = vote.edad || 0;
            let rango = 'No especificado';
            
            if (edad >= 16 && edad <= 25) rango = '16-25 a√±os';
            else if (edad >= 26 && edad <= 35) rango = '26-35 a√±os';
            else if (edad >= 36 && edad <= 45) rango = '36-45 a√±os';
            else if (edad >= 46 && edad <= 55) rango = '46-55 a√±os';
            else if (edad >= 56 && edad <= 65) rango = '56-65 a√±os';
            else if (edad >= 66) rango = '66+ a√±os';
            
            edadStats[rango] = (edadStats[rango] || 0) + 1;
        });

        this.renderStatsList('ubch-stats', ubchStats, 'ubch');
        this.renderStatsList('community-stats', communityStats, 'community');
        this.renderStatsList('sexo-stats', sexoStats, 'sexo');
        this.renderStatsList('edad-stats', edadStats, 'edad');

        console.log('‚úÖ Estad√≠sticas renderizadas');
    }

    renderStatsList(containerId, stats, type) {
        const container = document.getElementById(containerId);
        if (!container) return;

        container.innerHTML = '';
        const sortedStats = Object.entries(stats).sort(([,a], [,b]) => b - a);

        sortedStats.forEach(([name, count]) => {
            const div = document.createElement('div');
            div.className = `stats-item ${type}`;
            div.innerHTML = `
                <span>${name}</span>
                <span>${count}</span>
            `;
            container.appendChild(div);
        });
    }

    renderVotesTable() {
        const tbody = document.querySelector('#registros-table tbody');
        if (!tbody) {
            console.error('‚ùå No se encontr√≥ el tbody de la tabla');
            return;
        }

        tbody.innerHTML = '';

        this.votes.forEach(vote => {
            const tr = document.createElement('tr');
            const sexoClass = vote.sexo === 'M' ? 'sexo-masculino' : vote.sexo === 'F' ? 'sexo-femenino' : '';
            tr.innerHTML = `
                <td>${vote.name || 'N/A'}</td>
                <td>${vote.cedula || 'N/A'}</td>
                <td class="${sexoClass}">${vote.sexo === 'M' ? 'Masculino' : vote.sexo === 'F' ? 'Femenino' : 'N/A'}</td>
                <td>${vote.edad || 'N/A'}</td>
                <td>${vote.ubch || 'N/A'}</td>
                <td>${vote.community || 'N/A'}</td>
                <td>
                    <span class="vote-status ${vote.voted ? 'voted' : 'not-voted'}">
                        ${vote.voted ? 'S√≠' : 'No'}
                    </span>
                </td>
            `;
            tbody.appendChild(tr);
        });

        console.log(`‚úÖ Tabla renderizada con ${this.votes.length} votos`);
    }

    async handleRegistration() {
        const form = document.getElementById('registration-form');
        if (!form) {
            console.error('‚ùå Formulario de registro no encontrado');
            return;
        }

        const formData = new FormData(form);
        
        const name = formData.get('name').trim();
        const cedula = formData.get('cedula').trim();
        const telefono = formData.get('telefono').trim();
        const sexo = formData.get('sexo');
        const edad = formData.get('edad');
        const ubch = formData.get('ubch');
        const community = formData.get('community');

        if (!name || !cedula || !sexo || !edad || !ubch || !community) {
            this.showMessage('Por favor, completa todos los campos obligatorios.', 'error', 'registration');
            return;
        }

        const registrationData = {
            name,
            cedula: cedula.replace(/\D/g, ''),
            telefono: telefono.replace(/\D/g, ''),
            sexo,
            edad: parseInt(edad),
            ubch,
            community,
            registeredBy: this.getCurrentUser()?.username || 'usuario',
            voted: false,
            registeredAt: new Date().toISOString(),
            createdAt: new Date().toISOString()
        };

        this.setLoadingState('registration', true);

        try {
            // Guardar localmente
            const localId = 'local_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            const localVote = {
                id: localId,
                ...registrationData
            };
            
            this.votes.push(localVote);
            localStorage.setItem('localVotes', JSON.stringify(this.votes));
            
            this.showMessage('‚úÖ Registro guardado exitosamente.', 'success', 'registration');
            this.showMessage('üë§ Nuevo registro: ' + name + ' en ' + community, 'success', 'registration');
            
            form.reset();
            
            // Actualizar todas las pantallas
            this.updateAllDataDisplays();
            
        } catch (error) {
            console.error('‚ùå Error al registrar:', error);
            this.showMessage('Error al registrar persona. Int√©ntalo de nuevo.', 'error', 'registration');
        } finally {
            this.setLoadingState('registration', false);
        }
    }

    async handleCheckIn() {
        const cedula = document.getElementById('cedula-search')?.value.trim();
        
        if (!cedula) {
            this.showMessage('Por favor, ingresa un n√∫mero de c√©dula para buscar.', 'error', 'check-in');
            return;
        }

        const cleanCedula = cedula.replace(/\D/g, '');
        
        if (cleanCedula.length < 6 || cleanCedula.length > 10) {
            this.showMessage('Por favor, ingresa una c√©dula v√°lida (6 a 10 d√≠gitos).', 'error', 'check-in');
            return;
        }

        this.setLoadingState('check-in', true);

        try {
            let results = this.votes.filter(vote => vote.cedula === cleanCedula);
            results = results.filter(vote => !vote.id.startsWith('local_'));
        
            if (results.length === 0) {
                this.showMessage(`No se encontr√≥ a ninguna persona con la c√©dula ${cleanCedula}.`, 'error', 'check-in');
                return;
            }

            this.renderSearchResults(results);
            this.showMessage(`Se encontr√≥ ${results.length} persona(s) con la c√©dula ${cleanCedula}.`, 'success', 'check-in');
            
        } catch (error) {
            console.error('‚ùå Error en b√∫squeda:', error);
            this.showMessage('Error al buscar. Int√©ntalo de nuevo.', 'error', 'check-in');
        } finally {
            this.setLoadingState('check-in', false);
        }
    }

    renderSearchResults(results) {
        const container = document.getElementById('search-results');
        if (!container) return;

        container.innerHTML = '';

        results.forEach(person => {
            const div = document.createElement('div');
            div.className = 'search-result-item';
            
            const yaVoto = person.voted === true;
            
            div.innerHTML = `
                <div class="search-result-info">
                    <h4>${person.name}</h4>
                    <p>C√©dula: ${person.cedula}</p>
                    <p>Sexo: ${person.sexo === 'M' ? 'Masculino' : person.sexo === 'F' ? 'Femenino' : 'N/A'}</p>
                    <p>Edad: ${person.edad || 'N/A'} a√±os</p>
                    <p>UBCH: ${person.ubch}</p>
                    <p>Comunidad: ${person.community}</p>
                    <p class="vote-status-info">
                        <strong>Estado del voto:</strong> 
                        <span class="vote-status ${yaVoto ? 'voted' : 'not-voted'}">
                            ${yaVoto ? 'üéØ Ya confirmado' : '‚è≥ Pendiente de confirmar'}
                        </span>
                    </p>
                </div>
                ${yaVoto ? 
                    '<div class="already-voted-message">Esta c√©dula ya fue confirmada anteriormente</div>' :
                    `<button class="btn btn-success" onclick="votingSystem.confirmVote('${person.id}')">
                        Confirmar Voto
                    </button>`
                }
            `;
            container.appendChild(div);
        });
    }

    async confirmVote(personId) {
        try {
            console.log('‚úÖ Confirmando voto para ID:', personId);
            
            const vote = this.votes.find(v => v.id === personId);
            if (!vote) {
                this.showMessage('Error: Voto no encontrado. Intenta buscar nuevamente.', 'error', 'check-in');
                return;
            }
            
            if (personId.startsWith('local_')) {
                this.showMessage('Error: ID temporal detectado. Intenta buscar nuevamente.', 'error', 'check-in');
                return;
            }
            
            // Actualizar localmente
            const voteIndex = this.votes.findIndex(v => v.id === personId);
            if (voteIndex !== -1) {
                this.votes[voteIndex].voted = true;
                this.votes[voteIndex].voteTimestamp = new Date().toISOString();
                localStorage.setItem('localVotes', JSON.stringify(this.votes));
            }
            
            this.showMessage('¬°Voto confirmado con √©xito!', 'success', 'check-in');
            this.showMessage(`üéØ Voto confirmado: ${vote.name} en ${vote.community}`, 'success', true);
            
            const cedulaSearch = document.getElementById('cedula-search');
            const searchResults = document.getElementById('search-results');
            if (cedulaSearch) cedulaSearch.value = '';
            if (searchResults) searchResults.innerHTML = '';
            
            this.updateAllDataDisplays();
            
        } catch (error) {
            console.error('‚ùå Error al confirmar voto:', error);
            this.showMessage('Error al confirmar el voto. Int√©ntalo de nuevo.', 'error', 'check-in');
        }
    }

    updateAllDataDisplays() {
        console.log('üîÑ Actualizando todas las pantallas...');
        
        if (this.currentPage === 'dashboard') {
            this.renderDashboardPage();
        }
        
        if (this.currentPage === 'listado') {
            this.renderVotesTable();
        }
        
        if (this.currentPage === 'statistics') {
            this.renderStatisticsPage();
        }
    }

    setLoadingState(page, loading) {
        const form = document.getElementById(`${page}-form`);
        if (!form) return;

        const submitBtn = form.querySelector('button[type="submit"]');
        if (!submitBtn) return;

        const btnText = submitBtn.querySelector('.btn-text');
        const btnLoading = submitBtn.querySelector('.btn-loading');

        if (loading) {
            if (btnText) btnText.style.display = 'none';
            if (btnLoading) btnLoading.style.display = 'inline';
            submitBtn.disabled = true;
        } else {
            if (btnText) btnText.style.display = 'inline';
            if (btnLoading) btnLoading.style.display = 'none';
            submitBtn.disabled = false;
        }
    }
}

// === CLASE FIREBASE (EXTENSI√ìN) ===
class VotingSystemFirebase extends VotingSystem {
    constructor() {
        super();
        
        if (window.votingSystem && window.votingSystem !== this) {
            console.log('‚ö†Ô∏è Sistema ya inicializado, evitando duplicaci√≥n');
            return;
        }
        
        window.votingSystem = this;
        console.log('‚úÖ Instancia de VotingSystemFirebase creada correctamente');
        
        this.init();
    }

    async init() {
        console.log('üîÑ Inicializando VotingSystemFirebase...');
        
        const currentUser = this.getCurrentUser();
        if (currentUser) {
            if (currentUser.rol === 'verificador') {
                this.currentPage = 'check-in';
            } else if (currentUser.rol === 'registrador') {
                this.currentPage = 'registration';
            }
        }
            
        await this.loadDataFromFirebase();
        this.setupEventListeners();
        this.setupNavigationByRole();
        this.renderCurrentPage();
        
        console.log('‚úÖ VotingSystemFirebase inicializado correctamente');
    }

    async loadDataFromFirebase() {
        try {
            if (this.isLoadingData) {
                console.log('‚ö†Ô∏è Carga de datos en progreso, evitando duplicaci√≥n');
                return;
            }
            
            this.isLoadingData = true;
            console.log('üì• Cargando datos desde Firebase...');
            
            if (!window.firebaseDB || !window.firebaseDB.votesCollection) {
                console.log('‚ö†Ô∏è Firebase no disponible, cargando datos locales');
                this.isLoadingData = false;
                return this.loadDataLocally();
            }
            
            const votesSnapshot = await window.firebaseDB.votesCollection.get();
            this.votes = votesSnapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));
            console.log(`‚úÖ ${this.votes.length} votos cargados desde Firebase`);

            if (!this.ubchConfigLoaded) {
                try {
                    const ubchSnapshot = await window.firebaseDB.ubchCollection.doc('config').get();
                    if (ubchSnapshot.exists) {
                        this.ubchToCommunityMap = ubchSnapshot.data().mapping;
                        console.log('‚úÖ Configuraci√≥n UBCH cargada desde Firebase');
                    } else {
                        console.log('‚ö†Ô∏è No se encontr√≥ configuraci√≥n UBCH en Firebase, usando configuraci√≥n por defecto');
                        await this.saveUBCHConfigToFirebase();
                    }
                    
                    this.ubchConfigLoaded = true;
                    
                } catch (error) {
                    console.error('‚ùå Error cargando configuraci√≥n UBCH:', error);
                    this.ubchConfigLoaded = true;
                }
            }

            this.isLoadingData = false;
            console.log('‚úÖ Datos cargados desde Firebase:', this.votes.length, 'registros');

        } catch (error) {
            console.error('‚ùå Error cargando datos de Firebase:', error);
            console.log('üîÑ Intentando cargar datos locales como fallback');
            this.isLoadingData = false;
            return this.loadDataLocally();
        }
    }

    async saveUBCHConfigToFirebase() {
        try {
            await window.firebaseDB.ubchCollection.doc('config').set({
                mapping: this.ubchToCommunityMap,
                lastUpdated: new Date()
            });
            console.log('‚úÖ Configuraci√≥n UBCH guardada en Firebase');
        } catch (error) {
            console.error('‚ùå Error guardando configuraci√≥n UBCH:', error);
        }
    }

    setupNavigationByRole() {
        const currentUser = this.getCurrentUser();
        if (!currentUser) return;

        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(btn => btn.style.display = 'none');

        if (currentUser.rol === 'verificador') {
            const navCheckIn = document.getElementById('nav-check-in');
            if (navCheckIn) {
                navCheckIn.style.display = 'block';
                navCheckIn.classList.add('active');
            }
        } else if (currentUser.rol === 'registrador') {
            const navRegistration = document.getElementById('nav-registration');
            if (navRegistration) {
                navRegistration.style.display = 'block';
                navRegistration.classList.add('active');
            }
        } else {
            navButtons.forEach(btn => btn.style.display = 'block');
        }
    }
}

// === INICIALIZACI√ìN UNIFICADA ===
function initializeVotingSystem() {
    console.log('üöÄ Inicializando sistema de votos unificado...');
    
    try {
        // Limpiar instancia anterior si existe
        if (window.votingSystem) {
            console.log('üîÑ Limpiando instancia anterior del sistema...');
            window.votingSystem = null;
        }

        // Crear nueva instancia
        if (typeof VotingSystemFirebase !== 'undefined') {
            window.votingSystem = new VotingSystemFirebase();
            console.log('‚úÖ VotingSystemFirebase creado');
        } else if (typeof VotingSystem !== 'undefined') {
            window.votingSystem = new VotingSystem();
            console.log('‚úÖ VotingSystem creado (modo offline)');
        } else {
            throw new Error('No se encontr√≥ ninguna clase de sistema de votaci√≥n');
        }

        // Mostrar informaci√≥n del usuario
        const currentUser = localStorage.getItem('currentUser');
        if (currentUser) {
            try {
                const user = JSON.parse(currentUser);
                const userInfo = document.getElementById('userId');
                if (userInfo) {
                    userInfo.textContent = `${user.username} (${user.rol})`;
                }
            } catch (error) {
                console.error('Error al mostrar informaci√≥n del usuario:', error);
            }
        }

        console.log('‚úÖ Sistema de votos unificado inicializado correctamente');
        
    } catch (error) {
        console.error('‚ùå Error inicializando sistema de votos:', error);
    }
}

// === INICIALIZACI√ìN AUTOM√ÅTICA ===
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM cargado, iniciando sistema...');
    initializeVotingSystem();
});

// === FUNCIONES GLOBALES ===
function normalizarUsuario(username) {
    return (username || '').trim().toLowerCase();
}

console.log('‚úÖ Sistema de votos unificado cargado correctamente'); 