// enhanced-init.js
// Inicializaci√≥n mejorada del sistema de votos 2025

console.log('üöÄ Iniciando Sistema de Votos 2025 (Versi√≥n Mejorada)...');

// Configuraci√≥n global
window.systemConfig = {
    maxRetries: 5,
    retryDelay: 1000,
    debugMode: true
};

// Funci√≥n de logging mejorada
function log(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    
    if (window.systemConfig.debugMode) {
        console.log(logMessage);
    }
    
    // Tambi√©n mostrar en la interfaz si hay un elemento de logs
    const logsElement = document.getElementById('system-logs');
    if (logsElement) {
        logsElement.textContent += logMessage + '\n';
        logsElement.scrollTop = logsElement.scrollHeight;
    }
}

// Verificar dependencias cr√≠ticas
function checkCriticalDependencies() {
    log('üîç Verificando dependencias cr√≠ticas...');
    
    const dependencies = [
        { name: 'Firebase', check: () => typeof firebase !== 'undefined' },
        { name: 'Firebase Config', check: () => window.firebaseDB !== undefined },
        { name: 'Voting System', check: () => typeof VotingSystem !== 'undefined' },
        { name: 'DOM Ready', check: () => document.readyState === 'complete' }
    ];
    
    let allDependenciesMet = true;
    
    for (const dep of dependencies) {
        try {
            if (dep.check()) {
                log(`‚úÖ ${dep.name}: OK`);
            } else {
                log(`‚ùå ${dep.name}: No disponible`);
                allDependenciesMet = false;
            }
        } catch (error) {
            log(`‚ùå ${dep.name}: Error - ${error.message}`);
            allDependenciesMet = false;
        }
    }
    
    return allDependenciesMet;
}

// Inicializar Firebase con retry
async function initializeFirebaseWithRetry() {
    log('üî• Inicializando Firebase con retry...');
    
    let retries = 0;
    
    while (retries < window.systemConfig.maxRetries) {
        try {
            if (window.firebaseDB && window.firebaseDB.isAvailable) {
                log('‚úÖ Firebase ya est√° disponible');
                return true;
            }
            
            // Esperar un poco antes del siguiente intento
            await new Promise(resolve => setTimeout(resolve, window.systemConfig.retryDelay));
            retries++;
            
            log(`‚è≥ Intento ${retries}/${window.systemConfig.maxRetries}...`);
            
        } catch (error) {
            log(`‚ùå Error en intento ${retries}: ${error.message}`);
            retries++;
        }
    }
    
    log('‚ö†Ô∏è Firebase no disponible despu√©s de m√∫ltiples intentos');
    return false;
}

// Inicializar sistema de votaci√≥n con retry
async function initializeVotingSystemWithRetry() {
    log('üó≥Ô∏è Inicializando sistema de votaci√≥n con retry...');
    
    let retries = 0;
    
    while (retries < window.systemConfig.maxRetries) {
        try {
            // Crear instancia del sistema
            if (typeof VotingSystemFirebase !== 'undefined') {
                window.votingSystem = new VotingSystemFirebase();
                log('‚úÖ VotingSystemFirebase creado');
            } else if (typeof VotingSystem !== 'undefined') {
                window.votingSystem = new VotingSystem();
                log('‚úÖ VotingSystem creado (modo offline)');
            } else {
                throw new Error('No se encontr√≥ ninguna clase de sistema de votaci√≥n');
            }
            
            // Inicializar el sistema
            if (window.votingSystem && typeof window.votingSystem.init === 'function') {
                await window.votingSystem.init();
                log('‚úÖ Sistema de votaci√≥n inicializado');
                return true;
            } else {
                throw new Error('M√©todo init no disponible');
            }
            
        } catch (error) {
            log(`‚ùå Error en intento ${retries}: ${error.message}`);
            retries++;
            
            if (retries < window.systemConfig.maxRetries) {
                await new Promise(resolve => setTimeout(resolve, window.systemConfig.retryDelay));
            }
        }
    }
    
    log('‚ö†Ô∏è Sistema de votaci√≥n no pudo inicializarse');
    return false;
}

// Inicializar funciones espec√≠ficas
async function initializeSpecificFunctions() {
    log('‚öôÔ∏è Inicializando funciones espec√≠ficas...');
    
    try {
        // 1. Inicializar Registro
        await initializeRegistration();
        
        // 2. Inicializar Confirmar Voto
        await initializeCheckIn();
        
        // 3. Inicializar Listado
        await initializeList();
        
        // 4. Inicializar Totales
        await initializeTotals();
        
        // 5. Inicializar Estad√≠sticas
        await initializeStatistics();
        
        log('‚úÖ Funciones espec√≠ficas inicializadas');
        return true;
        
    } catch (error) {
        log(`‚ùå Error inicializando funciones espec√≠ficas: ${error.message}`);
        return false;
    }
}

// Inicializar funci√≥n de Registro
async function initializeRegistration() {
    log('üìù Inicializando funci√≥n de Registro...');
    
    try {
        const registrationForm = document.getElementById('registration-form');
        if (registrationForm) {
            // Configurar event listener
            registrationForm.removeEventListener('submit', handleRegistrationSubmit);
            registrationForm.addEventListener('submit', handleRegistrationSubmit);
            
            // Cargar opciones
            await loadUBCHOptions();
            await loadCommunityOptions();
            
            log('‚úÖ Funci√≥n de Registro inicializada');
        } else {
            log('‚ö†Ô∏è Formulario de registro no encontrado');
        }
        
    } catch (error) {
        log(`‚ùå Error inicializando registro: ${error.message}`);
    }
}

// Inicializar funci√≥n de Confirmar Voto
async function initializeCheckIn() {
    log('‚úÖ Inicializando funci√≥n de Confirmar Voto...');
    
    try {
        const checkInPage = document.getElementById('check-in-page');
        if (checkInPage) {
            // Configurar b√∫squeda de c√©dula
            const cedulaSearch = document.getElementById('cedula-search');
            if (cedulaSearch) {
                cedulaSearch.removeEventListener('input', handleCedulaSearch);
                cedulaSearch.addEventListener('input', handleCedulaSearch);
            }
            
            log('‚úÖ Funci√≥n de Confirmar Voto inicializada');
        } else {
            log('‚ö†Ô∏è P√°gina de confirmaci√≥n no encontrada');
        }
        
    } catch (error) {
        log(`‚ùå Error inicializando confirmaci√≥n: ${error.message}`);
    }
}

// Inicializar funci√≥n de Listado
async function initializeList() {
    log('üìã Inicializando funci√≥n de Listado...');
    
    try {
        const listPage = document.getElementById('listado-page');
        if (listPage) {
            // Configurar filtros y paginaci√≥n
            setupListFilters();
            setupListPagination();
            
            // Cargar datos iniciales
            await loadListData();
            
            log('‚úÖ Funci√≥n de Listado inicializada');
        } else {
            log('‚ö†Ô∏è P√°gina de listado no encontrada');
        }
        
    } catch (error) {
        log(`‚ùå Error inicializando listado: ${error.message}`);
    }
}

// Inicializar funci√≥n de Totales
async function initializeTotals() {
    log('üìä Inicializando funci√≥n de Totales...');
    
    try {
        const totalsPage = document.getElementById('dashboard-page');
        if (totalsPage) {
            // Configurar actualizaci√≥n de totales
            setupTotalsUpdate();
            
            // Cargar totales iniciales
            await loadTotalsData();
            
            log('‚úÖ Funci√≥n de Totales inicializada');
        } else {
            log('‚ö†Ô∏è P√°gina de totales no encontrada');
        }
        
    } catch (error) {
        log(`‚ùå Error inicializando totales: ${error.message}`);
    }
}

// Inicializar funci√≥n de Estad√≠sticas
async function initializeStatistics() {
    log('üìà Inicializando funci√≥n de Estad√≠sticas...');
    
    try {
        const statsPage = document.getElementById('statistics-page');
        if (statsPage) {
            // Configurar gr√°ficos
            setupStatisticsCharts();
            
            // Cargar datos de estad√≠sticas
            await loadStatisticsData();
            
            log('‚úÖ Funci√≥n de Estad√≠sticas inicializada');
        } else {
            log('‚ö†Ô∏è P√°gina de estad√≠sticas no encontrada');
        }
        
    } catch (error) {
        log(`‚ùå Error inicializando estad√≠sticas: ${error.message}`);
    }
}

// Configurar navegaci√≥n
function setupNavigation() {
    log('üß≠ Configurando navegaci√≥n...');
    
    try {
        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(button => {
            button.addEventListener('click', function() {
                const targetPage = this.getAttribute('data-page');
                if (targetPage) {
                    showPage(targetPage);
                }
            });
        });
        
        log('‚úÖ Navegaci√≥n configurada');
        
    } catch (error) {
        log(`‚ùå Error configurando navegaci√≥n: ${error.message}`);
    }
}

// Mostrar p√°gina espec√≠fica
function showPage(pageName) {
    log(`üìÑ Mostrando p√°gina: ${pageName}`);
    
    try {
        // Ocultar todas las p√°ginas
        const pages = document.querySelectorAll('.page');
        pages.forEach(page => page.classList.remove('active'));
        
        // Mostrar p√°gina seleccionada
        const targetPage = document.getElementById(`${pageName}-page`);
        if (targetPage) {
            targetPage.classList.add('active');
        }
        
        // Actualizar navegaci√≥n
        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(btn => btn.classList.remove('active'));
        const activeButton = document.querySelector(`[data-page="${pageName}"]`);
        if (activeButton) {
            activeButton.classList.add('active');
        }
        
        log(`‚úÖ P√°gina ${pageName} mostrada`);
        
    } catch (error) {
        log(`‚ùå Error mostrando p√°gina ${pageName}: ${error.message}`);
    }
}

// Configurar men√∫ m√≥vil
function setupMobileMenu() {
    log('üì± Configurando men√∫ m√≥vil...');
    
    try {
        const menuDropdown = document.getElementById('menu-dropdown');
        if (menuDropdown) {
            const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
            
            let menuHTML = '';
            
            // Agregar enlaces seg√∫n el rol del usuario
            if (currentUser.rol === 'superusuario' || currentUser.rol === 'admin') {
                menuHTML += '<a href="admin-panel.html" class="menu-item"><span class="icon">‚öôÔ∏è</span>Panel de Administraci√≥n</a>';
            }
            
            // Agregar informaci√≥n del rol para verificadores
            if (currentUser.rol === 'verificador') {
                menuHTML += '<div class="menu-item info"><span class="icon">üîç</span>Verificador de Votos</div>';
            }
            
            menuHTML += '<a href="#" onclick="logout()" class="menu-item danger"><span class="icon">üö™</span>Cerrar Sesi√≥n</a>';
            
            menuDropdown.innerHTML = menuHTML;
        }
        
        log('‚úÖ Men√∫ m√≥vil configurado');
        
    } catch (error) {
        log(`‚ùå Error configurando men√∫ m√≥vil: ${error.message}`);
    }
}

// Verificar sesi√≥n del usuario
function checkUserSession() {
    log('üîí Verificando sesi√≥n del usuario...');
    
    try {
        const currentUser = localStorage.getItem('currentUser');
        const sessionTime = localStorage.getItem('sessionTime');
        
        if (!currentUser) {
            log('üîí No hay sesi√≥n activa, redirigiendo a login...');
            window.location.href = 'login.html';
            return false;
        }
        
        // Verificar si la sesi√≥n ha expirado (24 horas)
        if (sessionTime && (Date.now() - parseInt(sessionTime)) > 24 * 60 * 60 * 1000) {
            log('‚è∞ Sesi√≥n expirada, redirigiendo a login...');
            localStorage.removeItem('currentUser');
            localStorage.removeItem('sessionTime');
            window.location.href = 'login.html';
            return false;
        }
        
        log('‚úÖ Sesi√≥n v√°lida');
        return true;
        
    } catch (error) {
        log(`‚ùå Error verificando sesi√≥n: ${error.message}`);
        return false;
    }
}

// Funci√≥n de logout
function logout() {
    log('üö™ Cerrando sesi√≥n...');
    localStorage.removeItem('currentUser');
    localStorage.removeItem('sessionTime');
    window.location.href = 'login.html';
}

// Funci√≥n para alternar men√∫ m√≥vil
function toggleMenu() {
    const dropdown = document.getElementById('menu-dropdown');
    if (dropdown) {
        dropdown.classList.toggle('active');
    }
}

// Inicializaci√≥n principal mejorada
async function enhancedInitialization() {
    log('üöÄ Iniciando inicializaci√≥n mejorada...');
    
    try {
        // 1. Verificar dependencias cr√≠ticas
        if (!checkCriticalDependencies()) {
            log('‚ö†Ô∏è Algunas dependencias cr√≠ticas no est√°n disponibles');
        }
        
        // 2. Verificar sesi√≥n del usuario
        if (!checkUserSession()) {
            return;
        }
        
        // 3. Inicializar Firebase con retry
        const firebaseReady = await initializeFirebaseWithRetry();
        
        // 4. Inicializar sistema de votaci√≥n con retry
        const votingSystemReady = await initializeVotingSystemWithRetry();
        
        // 5. Inicializar funciones espec√≠ficas
        const functionsReady = await initializeSpecificFunctions();
        
        // 6. Configurar navegaci√≥n y men√∫
        setupNavigation();
        setupMobileMenu();
        
        // 7. Mostrar informaci√≥n del usuario
        const currentUser = localStorage.getItem('currentUser');
        if (currentUser) {
            try {
                const user = JSON.parse(currentUser);
                const userInfo = document.getElementById('userId');
                if (userInfo) {
                    userInfo.textContent = `${user.username} (${user.rol})`;
                }
            } catch (error) {
                log(`‚ùå Error mostrando informaci√≥n del usuario: ${error.message}`);
            }
        }
        
        // 8. Configurar cierre de men√∫
        document.addEventListener('click', function(event) {
            const menuToggle = document.querySelector('.menu-toggle');
            const menuDropdown = document.getElementById('menu-dropdown');
            
            if (menuToggle && menuDropdown && !menuToggle.contains(event.target) && !menuDropdown.contains(event.target)) {
                menuDropdown.classList.remove('active');
            }
        });
        
        log('üéâ Inicializaci√≥n mejorada completada');
        
        // Mostrar resumen
        const summary = {
            firebase: firebaseReady ? '‚úÖ' : '‚ùå',
            votingSystem: votingSystemReady ? '‚úÖ' : '‚ùå',
            functions: functionsReady ? '‚úÖ' : '‚ùå'
        };
        
        log(`üìä Resumen de inicializaci√≥n: Firebase ${summary.firebase}, Sistema ${summary.votingSystem}, Funciones ${summary.functions}`);
        
    } catch (error) {
        log(`‚ùå Error en inicializaci√≥n mejorada: ${error.message}`);
    }
}

// Ejecutar inicializaci√≥n cuando el DOM est√© listo
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', enhancedInitialization);
} else {
    enhancedInitialization();
}

// Exportar funciones para uso global
window.enhancedInitialization = enhancedInitialization;
window.logout = logout;
window.toggleMenu = toggleMenu;
window.showPage = showPage;

log('üìã Funciones globales configuradas (Versi√≥n Mejorada)'); 